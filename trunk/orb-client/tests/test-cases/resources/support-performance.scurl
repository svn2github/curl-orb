||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author Hitoshi Okada
|||

||
|| for performance type tests
||

{define-enum HowSize small, big}

||| sync

|| HttpSession Client
{define-proc {do-sync-test-hs
                 count:int,
                 expected-time:Time,
                 how-size:HowSize = HowSize.big
             }:Time
    let service:PerfTestServiceHS = {PerfTestServiceHS}
    
    let sw:StopWatch = {StopWatch}
    {sw.start}
    let v:#Array =
        {if how-size == HowSize.small then
            {service.get-small-dto count}
         else
            {service.get-large-dto count}
        }
    {sw.stop}
    let elapsed-time:Time = {sw.elapsed}
    {TestCondition.assert
        elapsed-time < expected-time, message = elapsed-time & ""}
    {TestCondition.assert v.size == count}
    {return elapsed-time}
}

|| DI Client
{define-proc {do-sync-test-di
                 count:int,
                 expected-time:Time,
                 how-size:HowSize = HowSize.big
             }:Time
    let service:PerfTestServiceDI = {PerfTestServiceDI}
    
    let sw:StopWatch = {StopWatch}
    {sw.start}
    let v:#Array =
        {if how-size == HowSize.small then
            {service.get-small-dto count}
         else
            {service.get-large-dto count}
        }
    {sw.stop}
    let elapsed-time:Time = {sw.elapsed}
    {TestCondition.assert
        elapsed-time < expected-time, message = elapsed-time & ""}
    {TestCondition.assert v.size == count}
    {return elapsed-time}
}

||| async

|| HttpSession Client
{define-proc {do-async-test-hs
                 count:int,
                 expected-time:Time,
                 how-size:HowSize = HowSize.big
             }:Time
    let result:int = 0
    let done?:bool
    let service:PerfTestServiceHS = {PerfTestServiceHS}
    let sw:StopWatch = {StopWatch}
    let elapsed-time:Time
    {sw.start}
    let worker:AsyncWorker =
        {if how-size == HowSize.small then
            {service.async-get-small-dto
                count,
                {on e:AsyncCallbackEvent do
                    {sw.stop} || HACK! there's overhead time to fire event?
                    {if-non-null ex = e.exception then
                        {TestCondition.fail}
                     else
                        set elapsed-time = {sw.elapsed}
                        set result = {non-null e.obj asa #Array}.size
                    }
                    set done? = true
                }
            }
         else
            {service.async-get-large-dto
                count,
                {on e:AsyncCallbackEvent do
                    {sw.stop} || HACK! there's overhead time to fire event?
                    {if-non-null ex = e.exception then
                        {TestCondition.fail}
                     else
                        set elapsed-time = {sw.elapsed}
                        set result = {non-null e.obj asa #Array}.size
                    }
                    set done? = true
                }
            }
        }
    
    {while not done? do
        {dispatch-events true}
    }
    {TestCondition.assert worker.done?}
    {TestCondition.assert count == result}
    {return elapsed-time}
}

|| DI Client
{define-proc {do-async-test-di
                 count:int,
                 expected-time:Time,
                 how-size:HowSize = HowSize.big
             }:Time
    let result:int = 0
    let done?:bool
    let service:PerfTestServiceDI = {PerfTestServiceDI}
    let sw:StopWatch = {StopWatch}
    let elapsed-time:Time
    {sw.start}
    let worker:AsyncWorker =
        {if how-size == HowSize.small then
            {service.async-get-small-dto
                count,
                {on e:AsyncCallbackEvent do
                    {sw.stop} || HACK! there's overhead time to fire event?
                    {if-non-null ex = e.exception then
                        {TestCondition.fail}
                     else
                        set elapsed-time = {sw.elapsed}
                        set result = {non-null e.obj asa #Array}.size
                    }
                    set done? = true
                }
            }
         else
            {service.async-get-large-dto
                count,
                {on e:AsyncCallbackEvent do
                    {sw.stop} || HACK! there's overhead time to fire event?
                    {if-non-null ex = e.exception then
                        {TestCondition.fail}
                     else
                        set elapsed-time = {sw.elapsed}
                        set result = {non-null e.obj asa #Array}.size
                    }
                    set done? = true
                }
            }
        }

    
    {while not done? do
        {dispatch-events true}
    }
    {TestCondition.assert worker.done?}
    {TestCondition.assert count == result}
    {return elapsed-time}
}