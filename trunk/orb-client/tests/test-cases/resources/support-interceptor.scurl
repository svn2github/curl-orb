||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author Hitoshi Okada
|||

|| interceptors
{let interceptor-result:{Array-of bool} = {{Array-of bool}}}

||
|| InterceptorA
||
{define-class public InterceptorA
  {inherits ClientInterceptor}

  {constructor public {default}
    {construct-super}
  }

  {method protected open {register-interceptor
                             client:AbstractClient
                         }:void
    {super.register-interceptor client}
  }

  {method protected open {build-server-url
                             server-url:Url
                         }:Url
||--    {return {url "http://10.20.129.175:8080/curl-orb-server"}} 
    {return {super.build-server-url server-url}}
  }

  {method protected open {build-orb-request-headers
                             headers:#HashTable
                         }:#HashTable
    {return {super.build-orb-request-headers headers}}
  }

  {method protected open {build-http-request-headers
                             headers:#HttpRequestHeaders
                         }:#HttpRequestHeaders
    {return {HttpRequestHeaders "Content-Encoding", "gzip"}}
  }

  {method protected open {handle-orb-response-headers
                             headers:#HashTable
                         }:void
    || TODO: write testcases here.
  }
  
  {method protected open {handle-http-response-headers
                             headers:#HttpResponseHeaders
                         }:void
    {TestCondition.assert
        headers["Content-Type"] == "application/octet-stream;charset=UTF-8"
    }
    {interceptor-result.append true}
  }

  {method protected open {handle-before-request ||before-advice
                             method-name:String,
                             arguments:#FastArray
                         }:void
    {if method-name == "echo" then
        {TestCondition.assert arguments[0] == "foo"}
     elseif method-name == "method2" then
        {TestCondition.fail}
     elseif method-name == "client-method2" then
        {TestCondition.assert arguments[0] == "fuga"} || test AbstractClient's client-method-name argument
     else
        ||async-sleeping
    }
    {interceptor-result.append true}
  }

  {method protected open {handle-after-response ||after-returning-advice
                             method-name:String,
                             arguments:#FastArray,
                             return-value:#any
                         }:void
    {if method-name == "echo" then
        {TestCondition.assert return-value == "foo"}
     elseif method-name == "method2" then
        {TestCondition.fail}
     elseif method-name == "client-method2" then
        {TestCondition.assert return-value == "fuga10true"} || test AbstractClient's client-method-name argument
     else
        ||async-sleeping
    }
    {interceptor-result.append true}
  }

  {method protected open {handle-exception ||throw-advice
                             method-name:String,
                             arguments:#FastArray,
                             exception:Exception
                         }:void
    {output "exception1:" & method-name & " " & arguments & " " & exception}
  }
}

||
|| InterceptorB
||
{define-class public InterceptorB
  {inherits ClientInterceptor}

  {constructor public {default}
    {construct-super}
  }

  {method protected open {register-interceptor
                             client:AbstractClient
                         }:void
    {super.register-interceptor client}
  }

  {method protected open {build-server-url
                             server-url:Url
                         }:Url
    {return {super.build-server-url server-url}}
  }

  {method protected open {build-orb-request-headers
                             headers:#HashTable
                         }:#HashTable
    {return {super.build-orb-request-headers headers}}
  }

  {method protected open {build-http-request-headers
                             headers:#HttpRequestHeaders
                         }:#HttpRequestHeaders
    {return {super.build-http-request-headers headers}}
  }

  {method protected open {handle-http-response-headers
                             headers:#HttpResponseHeaders
                         }:void
    {super.handle-http-response-headers headers}
  }

  {method protected open {handle-before-request ||before-advice
                             method-name:String,
                             arguments:#FastArray
                         }:void
    {if method-name == "echo" then
        {TestCondition.assert arguments[0] == "foo"}
     elseif method-name == "method2" then
        {TestCondition.assert arguments[0] == "fuga"}
     else
        ||async-sleeping
    }
    {interceptor-result.append true}
  }

  {method protected open {handle-after-response ||after-returning-advice
                             method-name:String,
                             arguments:#FastArray,
                             return-value:#any
                         }:void
    {if method-name == "echo" then
        {TestCondition.assert return-value == "foo"}
     elseif method-name == "method2" then
        {TestCondition.assert return-value == "fuga10true"}
     else
        ||async-sleeping
    }
    {interceptor-result.append true}
  }

  {method protected open {handle-exception ||throw-advice
                             method-name:String,
                             arguments:#FastArray,
                             exception:Exception
                         }:void
    {output "exception2:" & method-name & " " & arguments & " " & exception}
  }
}

||
|| InterceptorC (for handle-stop-request)
||
{define-class public InterceptorC
  {inherits ClientInterceptor}
  
  {constructor public {default}
    {construct-super}
  }
  
  {method protected open {handle-stop-request
                             method-name:String,
                             arguments:#FastArray
                         }:(stop-request?:bool, return-val:any)
    {if method-name == "echo" then
        {return true, "STOP-REQUEST"}
    }
    {return {self.handle-stop-request method-name, arguments}}
  }
}
