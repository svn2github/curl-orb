|||
||| Curl ORB for java (version 0.8)
|||  This code was generated by the Curl code generator automatically.

|||  package name   : TESTS1
|||  generated date : 2010-01-29 18:50:32.348000
|||

{import * from COM.CURL.ORB} 

{define-class public Foo {inherits ApplicationContextClient}
  
  field package _person:#Person 
  field private _field-name:#String 
  field public public-test-field:#String 
  
  {constructor public {default server-url:#Url = null} 
    {construct-super.ApplicationContextClient "foo1", server-url = server-url} 
  } 
  
  {method public {async-set-field-name v0:String, ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "setFieldName", client-method-name = "set-field-name", arguments = {FastArray v0}, {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {set-field-name v0:String}:void 
    {self.invoke "setFieldName", client-method-name = "set-field-name", arguments = {FastArray v0}} 
  } 
  
  {method public {async-get-person ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "getPerson", client-method-name = "get-person", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {get-person}:#Person 
    {return {self.invoke "getPerson", client-method-name = "get-person"} asa #Person} 
  } 
  
  {method public {async-get-person-akira v0:String, v1:String, ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "getPersonAkira", client-method-name = "get-person-akira", arguments = {FastArray v0, v1}, {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {get-person-akira v0:String, v1:String}:#PersonAkira 
    {return {self.invoke "getPersonAkira", client-method-name = "get-person-akira", arguments = {FastArray v0, v1}} asa #PersonAkira} 
  } 
  
  {method public {echo-list v0:Array}:#Array 
    {return {self.invoke "echoList", client-method-name = "echo-list", arguments = {FastArray v0}} asa #Array} 
  } 
  
  {method public {async-echo-record-set v0:SerializableRecordSet, ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "echoRecordSet", client-method-name = "echo-record-set", arguments = {FastArray v0}, {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {echo-record-set v0:SerializableRecordSet}:#SerializableRecordSet 
    {return {self.invoke "echoRecordSet", client-method-name = "echo-record-set", arguments = {FastArray v0}} asa #SerializableRecordSet} 
  } 
  
  {method public {async-create-record-set ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "createRecordSet", client-method-name = "create-record-set", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {create-record-set}:#SerializableRecordSet 
    {return {self.invoke "createRecordSet", client-method-name = "create-record-set"} asa #SerializableRecordSet} 
  } 
  
  {method public {async-create-record-set-to-test-large-data v0:int, ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "createRecordSetToTestLargeData", client-method-name = "create-record-set-to-test-large-data", arguments = {FastArray v0}, {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {create-record-set-to-test-large-data v0:int}:#SerializableRecordSet 
    {return {self.invoke "createRecordSetToTestLargeData", client-method-name = "create-record-set-to-test-large-data", arguments = {FastArray v0}} asa #SerializableRecordSet} 
  } 
  
  {method public {async-create-test-large-data v0:int, ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "createTestLargeData", client-method-name = "create-test-large-data", arguments = {FastArray v0}, {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {create-test-large-data v0:int}:#Array 
    {return {self.invoke "createTestLargeData", client-method-name = "create-test-large-data", arguments = {FastArray v0}} asa #Array} 
  } 
  
  {method public {async-sleeping v0:int, ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "sleeping", client-method-name = "sleeping", arguments = {FastArray v0}, {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {sleeping v0:int}:bool 
    {return {self.invoke "sleeping", client-method-name = "sleeping", arguments = {FastArray v0}} asa bool} 
  } 
  
  {method public {async-echo-date v0:DateTime, ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "echoDate", client-method-name = "echo-date", arguments = {FastArray v0}, {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {echo-date v0:DateTime}:#DateTime 
    {return {self.invoke "echoDate", client-method-name = "echo-date", arguments = {FastArray v0}} asa #DateTime} 
  } 
  
  {method public {async-check-surrogate v0:String, ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "checkSurrogate", client-method-name = "check-surrogate", arguments = {FastArray v0}, {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {check-surrogate v0:String}:#String 
    {return {self.invoke "checkSurrogate", client-method-name = "check-surrogate", arguments = {FastArray v0}} asa #String} 
  } 
  
  {method public {async-occur-exception1 ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "occurException1", client-method-name = "occur-exception1", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {occur-exception1}:void 
    {self.invoke "occurException1", client-method-name = "occur-exception1"} 
  } 
  
  {method public {async-occur-exception2 ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "occurException2", client-method-name = "occur-exception2", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {occur-exception2}:void 
    {self.invoke "occurException2", client-method-name = "occur-exception2"} 
  } 
  
  {method public {async-occur-exception3 ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "occurException3", client-method-name = "occur-exception3", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {occur-exception3}:void 
    {self.invoke "occurException3", client-method-name = "occur-exception3"} 
  } 
  
  {method package {async-no-accessor-method ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "noAccessorMethod", client-method-name = "no-accessor-method", {splice ...}} asa AsyncWorker} 
  } 
  
  {method package {no-accessor-method}:void 
    {self.invoke "noAccessorMethod", client-method-name = "no-accessor-method"} 
  } 
  
  {method protected {async-protected-method ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "protectedMethod", client-method-name = "protected-method", {splice ...}} asa AsyncWorker} 
  } 
  
  {method protected {protected-method}:void 
    {self.invoke "protectedMethod", client-method-name = "protected-method"} 
  } 
  
  {method package {async-package-method ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "packageMethod", client-method-name = "package-method", {splice ...}} asa AsyncWorker} 
  } 
  
  {method package {package-method}:void 
    {self.invoke "packageMethod", client-method-name = "package-method"} 
  } 
  
  {method private {async-private-method ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "privateMethod", client-method-name = "private-method", {splice ...}} asa AsyncWorker} 
  } 
  
  {method private {private-method}:void 
    {self.invoke "privateMethod", client-method-name = "private-method"} 
  } 
  
  {method public {async-echo v0:String, ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "echo", client-method-name = "echo", arguments = {FastArray v0}, {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {echo v0:String}:#String 
    {return {self.invoke "echo", client-method-name = "echo", arguments = {FastArray v0}} asa #String} 
  } 
  
  {method public {async-get-field-name ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "getFieldName", client-method-name = "get-field-name", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {get-field-name}:#String 
    {return {self.invoke "getFieldName", client-method-name = "get-field-name"} asa #String} 
  } 
  || NOTE: The followings are methods of the super class
  {method public {super-method}:#String 
    {return {self.invoke "superMethod", client-method-name = "dummy"}} 
  } 

  {method public {supersuper-method}:#String 
    {return {self.invoke "supersuperMethod", client-method-name = "dummy"}} 
  } 
}

||--
||--{import * from COM.CURL.ORB}
||--
||--{define-class public Foo {inherits ApplicationContextClient}
||--
||--  field private _person:#Person
||--  field private _field-name:#String 
||--  field public public-test-field:#String 
||--  let public static-test-field:#String 
||--
||--  {constructor public {default} 
||--    {construct-super.ApplicationContextClient "foo1"} 
||--  } 
||--
||--  {method public {get-field-name}:#String 
||--    {return {self.invoke "getFieldName", client-method-name = "dummy"}} 
||--  } 
||--
||--  {method public {set-field-name v0:#String}:void 
||--    {self.invoke "setFieldName", client-method-name = "dummy", arguments = {{FastArray-of any} v0}} 
||--  } 
||--
||--  {method public {get-person}:#Person 
||--    {return {self.invoke "getPerson", client-method-name = "dummy"}} 
||--  } 
||--
||--  {method public {get-person-akira v0:#String, v1:#String}:#PersonAkira 
||--    {return {self.invoke "getPersonAkira", client-method-name = "dummy", arguments = {{FastArray-of any} v0, v1}}} 
||--  } 
||--
||--  {method public {echo-record-set v0:SerializableRecordSet}:#SerializableRecordSet 
||--    {return {self.invoke "echoRecordSet", client-method-name = "dummy", arguments = {{FastArray-of any} v0}}}
||--  }
||--
||--  {method public {create-record-set}:#SerializableRecordSet 
||--    {return {self.invoke "createRecordSet", client-method-name = "dummy"}} 
||--  }
||--
||--  {method public {create-record-set-to-test-large-data v0:int}:#SerializableRecordSet 
||--    {return {self.invoke "createRecordSetToTestLargeData", client-method-name = "dummy", arguments = {{FastArray-of any} v0}}} 
||--  }
||--
||--  {method public {create-test-large-data v0:int}:#{Array-of any}
||--    {return {self.invoke "createTestLargeData", client-method-name = "dummy", arguments = {{FastArray-of any} v0}}} 
||--  }
||--
||--  || added by hokada
||--  {method public {async-create-record-set-to-test-large-data
||--                     v0:int,
||--                     ...:EventHandler
||--                 }:AsyncWorker
||--    {return
||--        {self.async-invoke
||--            "createRecordSetToTestLargeData", client-method-name = "dummy",
||--            arguments = {{FastArray-of any} v0},
||--            {splice ...}
||--        }
||--    }
||--  } 
||--
||--  || added by hokada
||--  {method public {sleeping v0:int}:bool 
||--    {return {self.invoke "sleeping", client-method-name = "dummy", arguments = {{FastArray-of any} v0}}} 
||--  } 
||--  {method public {async-sleeping
||--                     v0:int,
||--                     ...:EventHandler
||--                 }:AsyncWorker
||--    {return
||--        {self.async-invoke
||--            "sleeping", client-method-name = "dummy",
||--            arguments = {{FastArray-of any} v0},
||--            {splice ...}
||--        }
||--    }
||--  } 
||--
||--  || added by hokada
||--  {method public {echo v0:String}:String 
||--    {return {self.invoke "echo", client-method-name = "echo", arguments = {{FastArray-of any} v0}}} 
||--  }
||--  {method public {async-echo v0:String, ...:EventHandler}:AsyncWorker 
||--    {return
||--        {self.async-invoke
||--            "echo", client-method-name = "dummy",
||--            arguments = {{FastArray-of any} v0},
||--            {splice ...}
||--        }
||--    }
||--  }
||--  {method public {echo-date v0:DateTime}:DateTime 
||--    {return {self.invoke "echoDate", client-method-name = "dummy", arguments = {{FastArray-of any} v0}}} 
||--  }
||--
||--  {method public {check-surrogate v0:String}:String
||--    {return {self.invoke "checkSurrogate", client-method-name = "dummy", arguments = {{FastArray-of any} v0}}} 
||--  }
||--  
||--  {method public {occur-exception1}:void
||--    {self.invoke "occurException1", client-method-name = "dummy"}
||--  }
||--  {method public {occur-exception2}:void
||--    {self.invoke "occurException2", client-method-name = "dummy"}
||--  }
||--  {method public {occur-exception3}:void
||--    {self.invoke "occurException3", client-method-name = "dummy"}
||--  }
||--  
||--  {method public {async-occur-exception1
||--                     ...:EventHandler
||--                 }:AsyncWorker 
||--    {return {self.async-invoke "occurException1", client-method-name = "dummy", {splice ...}}} 
||--  }
||--  {method public {async-occur-exception2
||--                     ...:EventHandler
||--                 }:AsyncWorker 
||--    {return {self.async-invoke "occurException2", client-method-name = "dummy", {splice ...}}} 
||--  }
||--  {method public {async-occur-exception3
||--                     ...:EventHandler
||--                 }:AsyncWorker 
||--    {return {self.async-invoke "occurException3", client-method-name = "dummy", {splice ...}}} 
||--  }
||--  
||--  || NOTE: The followings are methods of the super class
||--  {method public {super-method}:#String 
||--    {return {self.invoke "superMethod", client-method-name = "dummy"}} 
||--  } 
||--
||--  {method public {supersuper-method}:#String 
||--    {return {self.invoke "supersuperMethod", client-method-name = "dummy"}} 
||--  } 
||--} 
