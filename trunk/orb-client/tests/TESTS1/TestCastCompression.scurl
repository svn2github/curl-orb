|||
||| Curl ORB for java (version 0.8)
|||  This code was generated by the Curl code generator automatically.

|||  package name   : TESTS1
|||  generated date : 2010-01-29 18:42:07.078000
|||

{import * from COM.CURLAP.ORB} 

{define-class public TestCastCompression {inherits ApplicationContextClient}
  
  field private _field-name:#String 
  field private _person:#Person 
  
  {constructor public {default server-url:#Url = null} 
    {construct-super.ApplicationContextClient "testCastCompression", server-url = server-url} 
  } 
  
  {method public {async-set-field-name v0:String, ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "setFieldName", client-method-name = "set-field-name", arguments = {FastArray v0}, {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {set-field-name v0:String}:void 
    {self.invoke "setFieldName", client-method-name = "set-field-name", arguments = {FastArray v0}} 
  } 
  
  {method public {async-get-person ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "getPerson", client-method-name = "get-person", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {get-person}:#Person 
    {return {self.invoke "getPerson", client-method-name = "get-person"} asa #Person} 
  } 
  
  {method public {async-test-hash-map ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "testHashMap", client-method-name = "test-hash-map", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {test-hash-map}:#HashTable 
    {return {self.invoke "testHashMap", client-method-name = "test-hash-map"} asa #HashTable} 
  } 
  
  {method public {async-test-list ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "testList", client-method-name = "test-list", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {test-list}:#Array 
    {return {self.invoke "testList", client-method-name = "test-list"} asa #Array} 
  } 
  
  {method public {async-testdouble-array ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "testdoubleArray", client-method-name = "testdouble-array", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {testdouble-array}:#{FastArray-of double} 
    {return {self.invoke "testdoubleArray", client-method-name = "testdouble-array"} asa #{FastArray-of double}} 
  } 
  
  {method public {async-test-set ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "testSet", client-method-name = "test-set", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {test-set}:#Set 
    {return {self.invoke "testSet", client-method-name = "test-set"} asa #Set} 
  } 
  
  {method public {async-test-two-string ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "testTwoString", client-method-name = "test-two-string", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {test-two-string}:#{FastArray-of #{FastArray-of #String}} 
    {return {self.invoke "testTwoString", client-method-name = "test-two-string"} asa #{FastArray-of #{FastArray-of #String}}} 
  } 
  
  {method public {async-throw-test-exception1 ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "throwTestException1", client-method-name = "throw-test-exception1", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {throw-test-exception1}:void 
    {self.invoke "throwTestException1", client-method-name = "throw-test-exception1"} 
  } 
  
  {method public {async-get-field-name ...:EventHandler}:AsyncWorker 
    {return {self.async-invoke "getFieldName", client-method-name = "get-field-name", {splice ...}} asa AsyncWorker} 
  } 
  
  {method public {get-field-name}:#String 
    {return {self.invoke "getFieldName", client-method-name = "get-field-name"} asa #String} 
  } 
  
}


||--
||--{import * from COM.CURLAP.ORB} 
||--
||--|| for compression
||--{define-class public TestCastCompression {inherits ApplicationContextClient}
||--  
||--  {constructor public {default server-url:#Url = null} 
||--    {construct-super.ApplicationContextClient "testCastCompression", server-url = server-url} 
||--  } 
||--
||--  {method public {async-set-field-name v0:String, ...:EventHandler}:AsyncWorker 
||--    {return {self.async-invoke "setFieldName", arguments = {FastArray v0}, {splice ...}} asa AsyncWorker} 
||--  } 
||--
||--  {method public {set-field-name v0:String}:void 
||--    {self.invoke "setFieldName", arguments = {FastArray v0}} 
||--  } 
||--
||--  {method public {async-get-person ...:EventHandler}:AsyncWorker 
||--    {return {self.async-invoke "getPerson", {splice ...}} asa AsyncWorker} 
||--  } 
||--
||--  {method public {get-person}:#Person 
||--    {return {self.invoke "getPerson"} asa #Person} 
||--  } 
||--
||--  {method public {async-test-hash-map ...:EventHandler}:AsyncWorker 
||--    {return {self.async-invoke "testHashMap", {splice ...}} asa AsyncWorker} 
||--  } 
||--
||--  {method public {test-hash-map}:#HashTable 
||--    {return {self.invoke "testHashMap"} asa #HashTable} 
||--  } 
||--
||--  {method public {async-test-list ...:EventHandler}:AsyncWorker 
||--    {return {self.async-invoke "testList", {splice ...}} asa AsyncWorker} 
||--  } 
||--
||--  {method public {test-list}:#Array 
||--    {return {self.invoke "testList"} asa #Array} 
||--  } 
||--
||--  {method public {async-testdouble-array ...:EventHandler}:AsyncWorker 
||--    {return {self.async-invoke "testdoubleArray", {splice ...}} asa AsyncWorker} 
||--  } 
||--
||--  {method public {testdouble-array}:#{FastArray-of double} 
||--    {return {self.invoke "testdoubleArray"} asa #{FastArray-of double}} 
||--  } 
||--
||--  {method public {async-test-set ...:EventHandler}:AsyncWorker 
||--    {return {self.async-invoke "testSet", {splice ...}} asa AsyncWorker} 
||--  } 
||--
||--  {method public {test-set}:#Set 
||--    {return {self.invoke "testSet"} asa #Set} 
||--  } 
||--
||--  {method public {async-test-two-string ...:EventHandler}:AsyncWorker 
||--    {return {self.async-invoke "testTwoString", {splice ...}} asa AsyncWorker} 
||--  } 
||--
||--  {method public {test-two-string}:#{FastArray-of #{FastArray-of #String}} 
||--    {return {self.invoke "testTwoString"} asa #{FastArray-of #{FastArray-of #String}}} 
||--  } 
||--
||--  {method public {async-get-field-name ...:EventHandler}:AsyncWorker 
||--    {return {self.async-invoke "getFieldName", {splice ...}} asa AsyncWorker} 
||--  } 
||--
||--  {method public {get-field-name}:#String 
||--    {return {self.invoke "getFieldName"} asa #String} 
||--  } 
||--
||--  {method public {throw-test-exception1}:void
||--    {self.invoke "throwTestException1"}
||--  }
||--
||--  {method public {async-throw-test-exception1 ...:EventHandler}:AsyncWorker 
||--    {return {self.async-invoke "throwTestException1", {splice ...}} asa AsyncWorker} 
||--  } 
||--}
