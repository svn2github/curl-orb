||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public serializable sealed BigDecimal
  {inherits AbstractExtraSerializableType}

  || value of this object is unscaled-value * 10^(-scale)
  field public constant unscaled-value:BigInteger
  field public constant scale:int

  let package constant b2:BigInteger = {BigInteger.from-int 2}
  let package constant b10:BigInteger = {BigInteger.from-int 10}
  let package constant fract-mul:int64 =
      {bit-sll (1 asa int64), 53}
  let package constant bfract-mul:BigInteger =
      {BigInteger.from-int64 BigDecimal.fract-mul}

  || Produces a BigDecimal whose (scaled) value is equal to a,
  || with the scale set as specified.
  || The rounding-mode is applied if scale < 0.
  {factory public implicit
    {from-BigInteger
        a:BigInteger,
        scale:int = 0,
        rounding-mode:RoundingMode = RoundingMode.round-away-from-zero
    }:BigDecimal
    {if scale == 0 then
        {return {BigDecimal.from-fields a, scale}}
     elseif scale > 0 then
        {return
            {BigDecimal.from-fields
                {a.multiply {BigDecimal.b10.power scale}},
                scale
            }
        }
     else
        {return
            {{BigDecimal.from-fields a, 0}.set-scale
                scale,
                rounding-mode = rounding-mode
            }
        }
    }
  }

  || Produces a BigDecimal whose (scaled) value is equal to a,
  || with the scale set as specified.
  || The rounding-mode is applied if scale < 0.
  {factory public implicit
    {from-int64
        a:int64,
        scale:int = 0,
        rounding-mode:RoundingMode = RoundingMode.round-away-from-zero
    }:BigDecimal
    {return {BigDecimal.from-BigInteger a, scale = scale, rounding-mode = rounding-mode}}
  }

  || Produces a BigDecimal whose (scaled) value is equal to a,
  || with the scale set as specified.
  || The rounding-mode is applied if scale < 0.
  {factory public implicit
    {from-int
        a:int,
        scale:int = 0,
        rounding-mode:RoundingMode = RoundingMode.round-away-from-zero
    }:BigDecimal
    {return {BigDecimal.from-BigInteger a, scale = scale, rounding-mode = rounding-mode}}
  }

  {define-proc package {divide-and-round
                           dividend:BigInteger,
                           divisor:BigInteger,
                           rounding-mode:RoundingMode
                       }:BigInteger
    let (quotient:BigInteger, remainder:BigInteger) = {dividend.divide divisor}
    let rem-sign:int = remainder.signum
    {if rem-sign != 0 then
        || quot-sign will be the number to add when rounding away from zero
        let quot-sign:int = quotient.signum
        {if quot-sign == 0 then
            set quot-sign = rem-sign * divisor.signum
        }
        {switch rounding-mode
         case RoundingMode.round-toward-even do
            let r2:BigInteger = {{remainder.add remainder}.abs}
            let cmp:int = {{divisor.abs}.compare r2}
            {if cmp < 0 or (cmp == 0 and not quotient.even?) then
                set quotient = {quotient.add quot-sign}
            }

         case RoundingMode.round-toward-zero do
            let r2:BigInteger = {{remainder.add remainder}.abs}
            let cmp:int = {{divisor.abs}.compare r2}
            {if cmp < 0 then
                set quotient = {quotient.add quot-sign}
            }

         case RoundingMode.round-away-from-zero do
            let r2:BigInteger = {{remainder.add remainder}.abs}
            let cmp:int = {{divisor.abs}.compare r2}
            {if cmp <= 0 then
                set quotient = {quotient.add quot-sign}
            }

         case RoundingMode.floor do
            {if quot-sign < 0 then
                set quotient = {quotient.add -1}
            }

         case RoundingMode.ceiling do
            {if quot-sign > 0 then
                set quotient = {quotient.add 1}
            }

         case RoundingMode.truncate do
            || No operation is necessary in this case.

         case RoundingMode.away-from-zero do
            set quotient = {quotient.add quot-sign}

         case RoundingMode.none do
            {throw
                {ArithmeticException
                    "Unexpected precision loss when rounding a BigDecimal"
                }
            }
        }
    }
    {return quotient}
  }

  {define-proc package {full-precision-scale a:double}:int
    let (fraction:double, exponent:int) = {frexp a}
    || Convert binary exponent to decimal exponent, multiplying
    ||   by log10(2).
    {return {ceiling 0.30103 * (53 - exponent)} asa int}
  }

  || Produces a BigDecimal whose (scaled) value is equal to a,
  || with the scale set as specified.  The default scale value provides
  || a number of significant digits that equals the amount of precision
  || in a.  The rounding-mode is applied if any nonzero digits are
  || omitted.
  {factory public implicit
    {from-double
        a:double,
        scale:int = {BigDecimal.full-precision-scale a},
        rounding-mode:RoundingMode = RoundingMode.round-away-from-zero
    }:BigDecimal
    let (fraction:double, exponent:int) = {frexp a}
    let numerator:BigInteger = (fraction * BigDecimal.fract-mul) asa int64
    let denominator:BigInteger = BigDecimal.bfract-mul
    {if exponent > 0 then
        set numerator = {numerator.multiply {BigDecimal.b2.power exponent}}
     elseif exponent < 0 then
        set denominator = {denominator.multiply {BigDecimal.b2.power -exponent}}
    }
    {if scale > 0 then
        set numerator = {numerator.multiply {BigDecimal.b10.power scale}}
     elseif scale < 0 then
        set denominator = {denominator.multiply {BigDecimal.b10.power -scale}}
    }
    let mantissa:BigInteger =
        {BigDecimal.divide-and-round numerator, denominator, rounding-mode}
    {return {BigDecimal.from-fields mantissa, scale}}
  }

  || Create a BigDecimal whose print representation would be s.
  || scale is obtained from the location of the decimal point in the string.
  || There is never a need for rounding.
  {factory public implicit {from-String s:String}:BigDecimal
    let sign-ok?:bool = true
    let decimal-ok?:bool = true
    let scale:int = 0
    let sign:int = 1
    let accum:BigInteger = 0
    {for c in s do
        {if sign-ok? then
            {if {CharClass.whitespace-chars.member? c} then
                {continue}
             elseif c == '-' then
                set sign = -1
                set sign-ok? = false
                {continue}
             elseif c == '+' then
                set sign-ok? = false
                {continue}
            }
        }
        {if decimal-ok? then
            {if c == '.' then
                set decimal-ok? = false
                {continue}
            }
        }
        let d:int = {digit c, 10}
        {if d >= 0 then
            set accum = {accum.multiply BigDecimal.b10}
            set accum = {accum.add d}
            {if not decimal-ok? then
                || If we are after the decimal point, count up
                ||   the number of fractional places in scale.
                set scale = scale + 1
            }
         else
            {break}
        }
    }
    {if sign < 0 then
        set accum = {accum.negate}
    }

    {return {BigDecimal.from-fields accum, scale}}
  }

  {constructor package {from-fields unscaled-value:BigInteger, scale:int}
    set self.unscaled-value = unscaled-value
    set self.scale = scale
  }

  || Returns a BigDecimal equal to self, but with the scale
  || set as specified.  If the new scale is less than self.scale,
  || the specified rounding-mode is applied.
  {method public {set-scale
                     scale:int,
                     rounding-mode:RoundingMode = RoundingMode.round-away-from-zero
                 }:BigDecimal
    {if scale > self.scale then
        {return
            {BigDecimal.from-fields
                {self.unscaled-value.multiply
                    {BigDecimal.b10.power scale - self.scale}
                },
                scale
            }
        }
     elseif scale < self.scale then
        let divisor:BigInteger = {BigDecimal.b10.power self.scale - scale}
        let quotient:BigInteger =
            {BigDecimal.divide-and-round self.unscaled-value, divisor, rounding-mode}
        {return
            {BigDecimal.from-fields quotient, scale}
        }
     else
        || scale equals self.scale, so just return self.
        {return self}
    }
  }

  {method private {align-operands
                      a:BigDecimal
                  }:(self-int:BigInteger, a-int:BigInteger, opscale:int)
    let opscale:int = {max self.scale, a.scale}
    let self-int:BigInteger = self.unscaled-value
    let a-int:BigInteger = a.unscaled-value
    {if self.scale < opscale then
        set self-int = {self-int.multiply {BigDecimal.b10.power opscale - self.scale}}
    }
    {if a.scale < opscale then
        set a-int = {a-int.multiply {BigDecimal.b10.power opscale - a.scale}}
    }
    {return self-int, a-int, opscale}
  }

  || result = self + a
  || scale specifies the scale of the result
  || rounding-mode is applied if precision is reduced.
  {method public {add
                     a:BigDecimal,
                     scale:int = {max self.scale, a.scale},
                     rounding-mode:RoundingMode = RoundingMode.round-away-from-zero
                 }:BigDecimal
    let (self-int:BigInteger, a-int:BigInteger, opscale:int) =
        {self.align-operands a}
    let sum:BigDecimal = {BigDecimal.from-fields {self-int.add a-int}, opscale}
    {return {sum.set-scale scale, rounding-mode = rounding-mode}}
  }

  || result = -self
  {method public {negate}:BigDecimal
    {return {BigDecimal.from-fields {self.unscaled-value.negate}, self.scale}}
  }

  || result = self - a
  || scale specifies the scale of the result
  || rounding-mode is applied if precision is reduced.
  {method public {subtract
                     a:BigDecimal,
                     scale:int = {max self.scale, a.scale},
                     rounding-mode:RoundingMode = RoundingMode.round-away-from-zero
                 }:BigDecimal
    {return {self.add {a.negate}, scale = scale, rounding-mode = rounding-mode}}
  }

  || result = self * a
  || scale specifies the scale of the result
  || rounding-mode is applied if precision is reduced.
  {method public {multiply
                     a:BigDecimal,
                     scale:int = self.scale + a.scale,
                     rounding-mode:RoundingMode = RoundingMode.round-away-from-zero
                 }:BigDecimal
    let rval:BigInteger = {self.unscaled-value.multiply a.unscaled-value}
    let rbd:BigDecimal = {BigDecimal.from-fields rval, self.scale + a.scale}
    {return {rbd.set-scale scale, rounding-mode = rounding-mode}}
  }

  || result = self / a
  || scale specifies the scale of the result
  || rounding-mode is applied if the result is not exact.
  {method public {divide
                     a:BigDecimal,
                     scale:int = self.scale,
                     rounding-mode:RoundingMode = RoundingMode.round-away-from-zero
                 }:BigDecimal
    {if a.zero? then
        {throw {ArithmeticException "A BigDecimal divide by zero was attempted."}}
    }
    let prescale:int = (scale - self.scale) + a.scale
    let dividend:BigInteger = self.unscaled-value
    let divisor:BigInteger = a.unscaled-value
    {if prescale > 0 then
        || If we get here, we need to add more decimal places to the
        || dividend so the result will have the proper number of places.
        set dividend = {dividend.multiply {BigDecimal.b10.power prescale}}
     elseif prescale < 0 then
        || If we get here, we need to add more decimal places to the
        || divisor so the result will have the proper number of places.
        set divisor = {divisor.multiply {BigDecimal.b10.power -prescale}}
    }
    let quotient:BigInteger =
        {BigDecimal.divide-and-round dividend, divisor, rounding-mode}
    {return {BigDecimal.from-fields quotient, scale}}
  }

  || Is self equal to zero?
  {getter public {zero?}:bool
    {return self.unscaled-value.zero?}
  }

  || Return -1, 0, or 1, depending on the sign of self.
  {getter public {signum}:int
    {return self.unscaled-value.signum}
  }

  || Is self equal to a?
  {method public {equal? a:BigDecimal}:bool
    let (self-int:BigInteger, a-int:BigInteger, opscale:int) =
        {self.align-operands a}
    {return {self-int.equal? a-int}}
  }

  || Return -1, 0, or 1, depending on sign of self - a.
  {method public {compare a:BigDecimal}:int
    let (self-int:BigInteger, a-int:BigInteger, opscale:int) =
        {self.align-operands a}
    {return {self-int.compare a-int}}
  }

  || Return the absolute value of self.
  {method public {abs}:BigDecimal
    {return
        {if self.signum < 0 then
            {self.negate}
         else
            self
        }
    }
  }

  || result = max(self, a)
  {method public {max a:BigDecimal}:BigDecimal
    {return {if {self.compare a} >= 0 then self else a}}
  }

  || result = min(self, a)
  {method public {min a:BigDecimal}:BigDecimal
    {return {if {self.compare a} >= 0 then a else self}}
  }


  || Return a String that contains the print representation of self.
  || The String includes a decimal point if self.scale > 0.
  {method public {to-String}:String
    let sign:int = self.signum
    let scale:int = self.scale
    let unscaled-string:String = {{self.unscaled-value.abs}.to-String}
    let sb:StringBuf = {StringBuf unscaled-string}
    {if scale > 0 then
        {if sb.size <= scale then
            let zeros:String = {String.repeat-char '0', scale - sb.size + 1}
            {sb.splice zeros, 0}
        }
        {sb.insert '.', sb.size - scale}
     elseif scale < 0 and sign != 0 then
        {for i = 1 to -scale do
            {sb.append '0'}
        }
    }
    {if sign < 0 then
        {sb.insert '-', 0}
    }
    {return {sb.to-String}}
  }

  || Return a double that is closest to self.
  || If self has more than 53 bits of precision, some precision may be lost.
  || Overflow will cause infinity or minus infinity to be returned.
  {method public {to-double}:double
    let mantissa:double = {self.unscaled-value.to-double}
    let scale:int = self.scale
    {if scale > 0 then
        let divisor:double = {{BigDecimal.b10.power scale}.to-double}
        {return mantissa / divisor}
     elseif scale < 0 then
        let mpyer:double = {{BigDecimal.b10.power -scale}.to-double}
        {return mantissa * mpyer}
     else
        {return mantissa}
    }
  }

  {doc-next
    {purpose
        Deserializes from serialization stream.       
    }
    {parameter SerializeInputStream,
        An input stream which deserializes from a byte stream
    }
  }
  ||Deserializes from serialization stream
  {constructor public {object-deserialize in:SerializeInputStream}   
    {in.read-class-version}
    {construct-super.AbstractExtraSerializableType.object-deserialize in}    
    def intvalue = {deserialize in, String}
    def new-obj = {BigDecimal.from-String intvalue}
    set self.unscaled-value = new-obj.unscaled-value
    set self.scale = new-obj.scale
    
  }

  {doc-next
    {purpose
        Called by the serialization code when a class instance is to be written
    }
    {parameter out,
        An output stream which serializes into a byte stream
    }
  }
  ||serializes from serialization stream
  {method public {object-serialize out:SerializeOutputStream}:void
    {out.write-class-version 0}
    {super.object-serialize out}               
    {out.write-one {self.to-String}}
  }
}
