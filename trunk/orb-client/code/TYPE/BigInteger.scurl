||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{doc-next
    {purpose
        BigInteger Class ,correspond to the type java.math.BigInteger in Java.                
    }
    {notes
        The detail,please see the Java API Document.
    }
}
{define-class public serializable sealed BigInteger
  {inherits AbstractExtraSerializableType}

  {doc-next
    {purpose
        It is a factory.
        it creates a BigInteger whose value equals i.
    }
    {parameter i,
        int64 value .its value equals the being created BigInteger object.
    }
    {return-vals
        BigInteger value.
    }
  }
  || Create a BigInteger whose value equals i
  {factory public implicit {from-int64 i:int64}:BigInteger
    let a:u16s = {new u16s}
    let sign:int = {int64-to-u16s i, a}
    def return-big = {BigInteger.from-fields sign, a}
    {return return-big}
  }

  {doc-next
    {purpose
        It is a factory.
        it creates a BigInteger whose value equals i.
    }
    {parameter i,
        int value .its value equals the being created BigInteger object.
    }
    {return-vals
        BigInteger value.
    }
  }
  || Create a BigInteger whose value equals i
  {factory public implicit {from-int i:int}:BigInteger
    let a:u16s = {new u16s}
    let sign:int = {int64-to-u16s i, a}
    def return-big = {BigInteger.from-fields sign, a}
    {return return-big}
  }
  
  {doc-next
    {purpose
        It is a factory.
        it creates a BigInteger  print representation would be s.
    }
    {parameter s,
        String value .its value would be the representation of the being created BigInteger object.
    }
    {return-vals
        BigInteger value.
    }
  }
  || Create a BigInteger whose print representation would be s
  {factory public implicit {from-String s:String}:BigInteger
    
    let sign-ok?:bool = true
    let sign:int = 1
    let accum:BigInteger = 0
    {for c in s do
        {if sign-ok? then
            {if {CharClass.whitespace-chars.member? c} then
                {continue}
             elseif c == '-' then
                set sign = -1
                set sign-ok? = false
                {continue}
             elseif c == '+' then
                set sign-ok? = false
                {continue}
            }
        }
        let d:int = {digit c, 10}
        {if d >= 0 then
            set accum = {accum.multiply 10}
            set accum = {accum.add d}
         else
            {break}
        }
    }
    {if sign < 0 then
        set accum = {accum.negate}
    }
    {return accum}
  }

  {doc-next
    {purpose
        It is a property.        
    }
    {details
        It is a data type.
        The signum of this BigInteger: -1 for negative, 0 for 0,1 for positive .
    }  
  }
  || sign is always 1 or -1
  field package constant sign:int
  {doc-next
    {purpose
        It is a property.
        It is a {Array-of uint16} data type.
    }
    {details
        The magnitude of this BigInteger, in big-endian order.
    }
  }
  field package constant array:u16s

  {doc-next
    {purpose
        It is a constructor.
        it creates a BigInteger with the given the sign  and array value.
    }
    {parameter sign,
        int value .its value will be set to the property sign of this object.
    }
    {parameter array,
        {Array-of uint16} value .its value will be set to the property array of this object.
    }
  }
  {constructor package {from-fields sign:int, array:u16s}
    set self.sign = sign
    {trim-u16s array}
    set self.array = array
  }

  {doc-next
    {purpose
        Add a BigInteger to itself.It looks like:result = self + a
    }
    {parameter a,
        A BigInteger Object.it will be added to the current object.        
    }
    {return-vals BigInteger,
        The BigInteger Object after a added to itself. 
    }
  }
  || result = self + a
  {method public {add a:BigInteger}:BigInteger
    let c:u16s = {new u16s}
    {return
        {if self.sign == a.sign then
            {add-u16s self.array, a.array, c}
            {BigInteger.from-fields self.sign, c}
         else
            let sub-sign:int = {subtract-u16s self.array, a.array, c}
            {BigInteger.from-fields self.sign * sub-sign, c}
        }
    }
  }

  {doc-next
    {purpose
        It makes the current BigInteger object as a negate BigInteger.
        It looks like:result = -self
    }
    {return-vals BigInteger,
        The BigInteger Object after being converted to negate BigInteger. 
    }
  }
  || result = -self
  {method public {negate}:BigInteger
    {return {BigInteger.from-fields -self.sign, self.array}}
  }

  {doc-next
    {purpose
        It substracts a from the current BigInteger object.
        It looks like:result = self - a
    }
    {parameter a,
        A BigInteger Object.
    }
    {return-vals BigInteger,
        The BigInteger Object after being subtracted a. 
    }
  }
  || result = self - a
  {method public {subtract a:BigInteger}:BigInteger
    {return {self.add {a.negate}}}
  }

  {doc-next
    {purpose
        It multiplys  the current BigInteger object by a.
        It looks like:self * a
    }
    {parameter a,
        A BigInteger Object.
    }
    {return-vals BigInteger,
        The BigInteger Object after being multiplied by a. 
    }
  }
  || result = self * a
  {method public {multiply a:BigInteger}:BigInteger
    let c:u16s = {new u16s}
    {multiply-u16s self.array, a.array, c}
    {return {BigInteger.from-fields self.sign * a.sign, c}}
  }

  {doc-next
    {purpose
        It divides  the current BigInteger object by a.
        It looks like:self / a
    }
    {parameter a,
        A BigInteger Object.
    }
    {return-vals 
        The quotient BigInteger Object after being divided by a and
        remainder is the BigInteger quotient Object after being divided by a.
    }
  }
  || Divide self by a
  {method public {divide a:BigInteger}:(quotient:BigInteger, remainder:BigInteger)
    {if a.zero? then
        {throw {ArithmeticException "A BigInteger divide by zero was attempted."}}
    }
    let q:u16s = {new u16s}
    let r:u16s = {new u16s}
    {divide-u16s self.array, a.array, q, r}
    {return
        {BigInteger.from-fields self.sign * a.sign, q},
        {BigInteger.from-fields self.sign, r}
    }
  }

  {doc-next
    {purpose
        Judge  the current BigInteger object whether it is equal to zero.
    }
    {return-vals bool,
        true:it is equal to zero.else,its value will be false.
    }
  }
  || Is self equal to zero?
  {getter public {zero?}:bool
    {if self.array.size > 0 then {assert self.array[self.array.size - 1] != 0}}
    {return self.array.size == 0}
  }

  {doc-next
    {purpose
        get the sign of the current object.
    }
    {return-vals int,
        Return -1, 0, or 1, depending on the sign of self.
    }
  }
  || Return -1, 0, or 1, depending on the sign of self.
  {getter public {signum}:int
    {if self.zero? then
        {return 0}
     else
        {return self.sign}
    }
  }

  {doc-next
    {purpose
        Judge the current BigInteger Object whether it is equal to a.
    }
    {return-vals bool,
        true:if it is equal to a.else,fase will be returned.
    }
  }
  || Is self equal to a?
  {method public {equal? a:BigInteger}:bool
    {if self.zero? then {return a.zero?}}
    {return self.sign == a.sign and {compare-u16s self.array, a.array} == 0}
  }

  {doc-next
    {purpose
        compare the current BigInteger Object with a.
    }
    {parameter a,
        BigInteger Object.the object which will be compared with the current object.      
    }
    {return-vals int,
        0:if it is equal to a. 1:if it is larger than a. else ,-1 will be returned.
    }
  }
  || Return -1, 0, or 1, depending on sign of self - a.
  {method public {compare a:BigInteger}:int
    {if a.zero? then
        {return self.signum}
    }
    {if self.zero? then
        {return -a.signum}
    }
    {if self.sign != a.sign then
        {return self.sign}
    }
    let cmp-sign:int = {compare-u16s self.array, a.array}
    {return cmp-sign * self.sign}
  }

  {doc-next
    {purpose
        It is a getter.
        Judge whether it is an even number
    }   
    {return-vals bool,
        true:it is an even number,else it is an even number
    }
  }
  || Is self an even number?
  {getter public {even?}:bool
    {if self.array.size == 0 then
        {return true}
     else
        {return {bit-and self.array[0], 1} == 0}
    }
  }

  {doc-next
    {purpose
        Returns a BigInteger whose value is exponent.
        Note that exponent is an integer rather than a BigInteger.
        It looks like:result = self ^ exponent
    }
    {parameter exponent,
        int64. exponent exponent to which this BigInteger is to be raised     
    }
    {return-vals BigInteger,
        The result after being powered by exponent.
    }
  }
  || result = self ^ exponent
  {method public {power exponent:int64}:BigInteger
    let accum:BigInteger = 1
    let base:BigInteger = self
    {while exponent > 0 do
        {if {bit-and exponent, 1} != 0 then
            set accum = {accum.multiply base}
        }
        set base = {base.multiply base}
        set exponent = {bit-sra exponent, 1}
    }
    {return accum}
  }

  {doc-next
    {purpose
        Return an int64 that equals self.
    }
    {return-vals int64,
        the value is equal to the current BigInteger.
    }
  }
  || Return an int64 that equals self.
  || Note: no checking for overflow.
  {method public {to-int64}:int64
    let mag:int64 = {u16s-to-int64 self.array}
    {return self.sign * mag}
  }

  {doc-next
    {purpose
        Return an int that equals self.
    }
    {return-vals int,
        the value is equal to the current BigInteger.
    }
  }
  || Return an int that equals self.
  || Note: no checking for overflow.
  {method public {to-int}:int
    {return {self.to-int64} asa int}
  }

  {doc-next
    {purpose
        Return an double that equals self.
    }
    {return-vals double,
        the value is equal to the current BigInteger.
    }
  }
  || Return a double that is closest to self.
  || If self is larger than 53 bits, some precision may be lost.
  || Overflow will cause infinity or minus infinity to be returned.
  {method public {to-double}:double
    let (head:double, index:int) = {head-double-u16s self.array, 5}
    {if index > 0 then
        set head = {ldexp head, 16 * index}
    }
    {return {if self.sign > 0 then head else -head}}
  }

  {doc-next
    {purpose
        Return a String that contains the print representation of self.
    }
    {return-vals String,
        a String that contains the print representation of self.
    }
  }
  || Return a String that contains the print representation of self.
  {method public {to-String}:String
    let sign:int = self.signum
    let num:BigInteger = self
    {switch sign
     case 0 do
        {return "0"}
     case -1 do
        set num = {num.negate}
    }
    let longs:{Array-of int64} = {new {Array-of int64}}
    let p18:int64 = 1000000000000000000
    let b18:BigInteger = p18
    {while not num.zero? do
        let (q:BigInteger, r:BigInteger) = {num.divide b18}
        {longs.append {r.to-int64}}
        set num = q
    }
    let sb:StringBuf = {StringBuf}
    {if sign < 0 then
        {sb.append '-'}
    }
    let i:int = longs.size - 1
    {format out = sb, "%d", longs[i]}
    {while i > 0 do
        set i = i - 1
        {format out = sb, "%018d", longs[i]}
    }
    {return {sb.to-String}}
  }

  {doc-next
    {purpose
        Return the absolute value of self.
    }
    {return-vals BigInteger,
        the absolute value of self.
    }
  }
  || Return the absolute value of self.
  {method public {abs}:BigInteger
    {return
        {if self.signum < 0 then
            {self.negate}
         else
            self
        }
    }
  }

  {doc-next
    {purpose
        Return the maximum  value from a and self
    }
    {return-vals BigInteger,
        the max value of a and self.
    }
  }
  || result = max(self, a)
  {method public {max a:BigInteger}:BigInteger
    {return {if {self.compare a} >= 0 then self else a}}
  }

  {doc-next
    {purpose
        Return the minimum value from a and self
    }
    {return-vals BigInteger,
        the minimum value of a and self.
    }
  }
  || result = min(self, a)
  {method public {min a:BigInteger}:BigInteger
    {return {if {self.compare a} >= 0 then a else self}}
  }

  {doc-next
    {purpose
        Returns the number of bits in the minimal two's-complement
        representation of this BigInteger,excluding a sign bit.
        For positive BigIntegers, this is equivalent to the number of bits in
        the ordinary binary representation.
        It is guaranteed that 2^(result+1) > self >= 2^result.
    }
    {return-vals int64,
        number of bits in the minimal two's-complement
        representation of this BigInteger, excluding a sign bit.
    }
  }
  || Index of most significant bit in self.
  || It is guaranteed that 2^(result+1) > self >= 2^result,
  || provided self != 0.
  || Returns 0 if a == 0.
  {getter public {bit-length}:int64
    let sizem1:int = self.array.size - 1
    {if sizem1 < 0 then
        {return 0}
     else
        {return 16 * sizem1 + {uint16-bit-length self.array[sizem1]}}
    }
  }

  {doc-next
    {purpose
        Deserializes from serialization stream.       
    }
    {parameter in,
        An input stream which deserializes from a byte stream
    }
  }
  ||Deserializes from serialization stream
  {constructor public {object-deserialize in:SerializeInputStream}
    {in.read-class-version}
    {construct-super.AbstractExtraSerializableType.object-deserialize in}    
    def intvalue = {deserialize in, String}
    def big-obj = {BigInteger.from-String intvalue}
    set self.array = big-obj.array
    set self.sign = big-obj.sign
  }

  {doc-next
    {purpose
        Called by the serialization code when a class instance is to be written
    }
    {parameter out,
        An output stream which serializes into a byte stream
    }
  }
  ||Serializes from serialization stream
  {method public {object-serialize out:SerializeOutputStream}:void
    {out.write-class-version 0}
    {super.object-serialize out}

    {out.write-one {self.to-String}}
    
  }

  
}
