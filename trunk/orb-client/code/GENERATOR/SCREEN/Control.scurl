||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author ucai zhang
|||

|| CustomCommandButton
{define-class final CustomCommandButton {inherits CommandButton}

  {constructor {default
                   height:Distance = HEIGHT,
                   width:Distance = WIDTH,
                   font-size:Distance = FONT-SIZE,
                   ...
               }
    {construct-super
        height = height,
        width = width,
        font-size = font-size,
        {splice ...}
    }
  }
}

|| CustomDropdownList
{define-class final CustomDropdownList {inherits DropdownList}

  {constructor {default
                   height:Distance = HEIGHT,
                   font-size:Distance = FONT-SIZE,
                   ...
               }
    {construct-super
        height = height,
        font-size = font-size,       
        {splice ...}
    }
  }
}

|| CustomTextDisplay
{define-class CustomTextDisplay {inherits TextDisplay, Observer}

  {constructor {default
                   height:Distance = HEIGHT,
                   font-size:Distance = FONT-SIZE,
                   ...
               }
    {construct-super.TextDisplay
        height = height,
        font-size = font-size,
        {splice ...}
    }
  }

  {method protected open {handle-observer-message
                             sender:Observable,
                             message:any
                         }:void
    {if message != null and {type-of message} == String then
        def str-value = self.value asa String
        def msg = message asa String
        def value-str-array = {str-value.split split-chars = "/"}
        {if value-str-array.size > 0  then
            def old-value = {value-str-array.pop}
            set self.value =
                {str-value.substr 0 ,
                    str-value.size - old-value.size} &
            {if {msg.trim-clone}.empty? then
                ""
             else
                {msg.trim-clone} & ".scurl"
            }                 
            set self.tooltip = {Tooltip self.value}
        }
    }
  } 
}

|| CustomTextField
{define-class CustomTextField {inherits TextField, Observable}

  {constructor {default
                   height:Distance = HEIGHT,
                   font-size:Distance = FONT-SIZE,
                   ...
               }
    {construct-super.TextField
        height = height,
        font-size = font-size,
        {splice ...},
        {on ValueChanged at tf:TextField do
            {self.notify-observers message = self.value asa String}
        }
    }
    {construct-super.Observable}
  }
}

|| StyleTextField
{define-class StyleTextField {inherits Frame}

  field private _TextField:#TextField
  field private _button:#CommandButton
  field private _upper?:bool = false
  field private _old-value:#String
  field private _rule:Matcher = {Matcher "(.*)([a-z])(.*)"}
  field private _java-name:String = ""
  field private _original-value:String = ""
  field private _div-original-value:String = ""

  {constructor {default editable?:bool = true}
    set self.background = "white"
    set self.margin = 0pt
    set self.textField.editable? = editable?   
    {self.add-internal
        {self.layout-graphic}
    }
    {construct-super
        border-spec =
            {BorderSpec
                top-margin = 0pt,
                bottom-margin = 0pt
            } 
    }
  }

  {getter public {textField}:TextField
    {if {equal? self._TextField,null} then
        set self._TextField =
            {TextField
                font-size = 10pt,
                vorigin = "center",
                height = {add-stretch} 
            }
    }
    {return {non-null self._TextField}}
  }

  {getter public {button}:CommandButton
    {if {equal? self._button , null} then
        set self._button =
            {CommandButton
                label = "Style",
                {on Action do
                    {self.change-value-to-style self.textField.value asa String}  
                }
            }
    }
    {return {non-null self._button}}
  }  
  
  {setter public {oldValue value:String}:void
    set  self._old-value = value
  }
  
  {getter public {oldValue}:String
    {return self.textField.value asa String}
  }

  {setter public {javaName value:String}:void
    set  self._java-name = {value.trim-clone}
  }
  
  {getter public {javaName}:String
    {return self._java-name}
  }

  {getter public {div-javaName}:String
    {if {self.javaName.prefix? "set"} or {self.javaName.prefix? "get" } then
        {return {self.javaName.substr 3 , self.javaName.size - 3}}
     elseif {self.javaName.prefix? "is" }  then
        {return {self.javaName.substr 2 , self.javaName.size - 2}}
    }
    {return self.javaName}
  }

  {setter public {original-value value:String}:void
    set value = {value.trim-clone}
    set  self._original-value = value
    {if {value.prefix? "get-"} or  {value.prefix? "set-"} or  {value.prefix? "is-"} then
        {if {value.prefix? "is-"} then
            set self.div-original-value = {value.substr 3 , value.size - 3}        
         else
            set self.div-original-value = {value.substr 4 , value.size - 4}        
        }
        
    }
  }
  
  {getter public {original-value}:String
    {return self._original-value}   
  }

  {setter public {div-original-value value:String}:void
    set  self._div-original-value = value    
  }
  
  {getter public {div-original-value}:String
    {return self._div-original-value}
  }

  {setter public {editable? can?:bool}:void
    set self.button.enabled? = can?
    set self.textField.enabled? = can?
  }

  {method private {layout-graphic}:Graphic
    {return
        {HBox
            valign = "center",          
            self.textField,
            self.button
        }
    }
  }

  {method private {change-value-to-style value:String}:void
    set value = {value.trim-clone}
    {if value != "" then
        def java-value = {self.change-value-to-java-style value}
        def curl-value = {self.change-value-to-curl-style value}
        {if {java-value.equal? value} then
            {if {curl-value.equal? self.original-value} or {curl-value.equal? self.div-original-value} then
                set self.textField.value = curl-value
            }
         elseif {curl-value.equal? value} then
            set self.textField.value = java-value
        }
        
    }
  }

  {method private {change-value-to-curl-style value:String}:String
    {return {change-to-curl-style {value.trim-clone}}}
  }

  {method private {change-value-to-java-style value:String}:String
    set value = {value.trim-clone}
    {if value != "" then
        let java-value:String = ""
        {if {self.javaName.prefix? "set"} or {self.javaName.prefix? "get" } then
            set java-value = {self.javaName.substr 3 , self.javaName.size - 3}
         elseif {self.javaName.prefix? "is"} then
            set java-value = {self.javaName.substr 2 , self.javaName.size - 2}
         else
            set java-value = value
        }
        {if not java-value.empty? then
            def curl-name-1 = {change-to-curl-style self.javaName}
            def curl-name-2 = {change-to-curl-style java-value}
            {if {value.equal? curl-name-1} then
                set value = self.javaName
             elseif {value.equal? curl-name-2} then
                set value = java-value
            }
        }
    }
    {return value}
  }
}

|| AutocompleteSearchControl class
{define-class final AutocompleteSearchControl {inherits ListBox}

  field private _data-model:{Array-of String} = {{Array-of String}}

  {constructor {default ...}
    {construct-super
        background = "white",
        list-item-creation-proc =
            {proc {val:any}:ListItem
                def str-array = {(val asa String).split split-chars = "."}
                {if str-array.size > 1 then
                    def class-name = {str-array.get str-array.size - 1}
                    def pac-path = {(val asa String).replace-clone "." & class-name, "", starting-index = (val asa String).size - class-name.size - 1}
                    {return {ListValueItem class-name, value = val, label = {HBox spacing = 4pt, class-name,{text color = "gray", {value " - " & pac-path}}}}}
                }
                {return {ListValueItem val}}
            },
        selection-policy = SelectionPolicy.single,
        {splice ...}
    }
  }

  {method public {search-matched-items value:String}:void
    set self.data-model = self.source
    def tempModel:DefaultListModel  = self.data-model asa DefaultListModel 
    {if value != "" then
        {tempModel.filter
            {proc { item:any}:bool
                def str-array = {(item asa String).split split-chars = "."}
                {if str-array.size > 1 then
                    def class-name = {str-array.get str-array.size - 1}
                    {return {class-name.prefix? value, ignore-case? = true}}
                 else
                    def temp:String = item asa String
                    {return {temp.prefix? value, ignore-case? = true}}      
                }
                
            }
        }       
    }        
  }

  {setter public {source data-model:{Array-of String}}:void
    set self.data-model = {DefaultListModel {splice data-model}}
    set self._data-model = data-model
  }

  {getter public {source}:DefaultListModel
    {return {DefaultListModel {splice self._data-model}}}
  }
}
                        