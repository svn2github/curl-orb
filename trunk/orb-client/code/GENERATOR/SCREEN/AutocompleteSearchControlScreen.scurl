||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author ucai zhang
|||

|||
||| AutocompleteSearchControlScreen
||| 
{define-class AutocompleteSearchControlScreen
  {inherits AbstractDialog}

  field private _input-tf:#CustomTextField
  field private _search-area:#AutocompleteSearchControl
  field private _body:#Graphic
  field private _ok-bt:#CustomCommandButton
  field private _cancel-bt:#CustomCommandButton
  
  {constructor {default ...}
    {construct-super
        {on AttachEvent do
            {self.input-tf.request-key-focus}
        },
        background = BACK-GROUND1,
        margin = 10pt,
        width = 400,
        height = 250,
        {splice ...}
    }
  }

  {method public {layout-graphic}:void
    {self.add-internal          
        self.body,
        replace? = true
    }
  }

  {method public {handle-data data:any = null}:bool
    {if data == null then
        {return false}
    }
    def from-screen = data asa String
    def source = {{Array-of String}}
    {with-busy-cursor
        {try
            let cpl:{FastArray-of #ClassProperty} =
                {if from-screen != SERVICE-ClASS-DI then
                    {ClassPropertyLoader.get-all-ClassProperties server-url = server-url}
                 else
                    {ClassPropertyLoader.get-all-ClassProperties-in-ApplicationContext server-url = server-url}
                }
            {if from-screen == "InputScreen" then
                {for item in cpl do
                    {if-non-null item then
                        {source.append item.name asa String}
                    }
                }
             else
                {for item in cpl do
                    {if-non-null item then
                        {source.append item.server-class-name asa String}
                    }
                }
            }
            set self.search-area.source = source
            {return true}
         catch obj:ORBServerException  do
            {ErrorMessages.get-error-messages ErrorMessages.CLASS-REQUEST-EXCEPTION}           
         catch ht:HttpException do
            {ErrorMessages.get-error-messages ErrorMessages.SERVER-EXCEPTION}
         catch se:SerializeException do
            {ErrorMessages.get-error-messages ErrorMessages.SERIALIZE-EXCEPTION}
         catch obj:Exception  do
            {ErrorMessages.get-error-messages ErrorMessages.UNEXPECTED-EXCEPTION}
        }
    }
    {return false}
  }

  {method private {common-ation}:void
    {if self.search-area.selected-item-count == 1 then
        set self.return-value =
            ({self.search-area.selected-items.read-one} asa ListItem).value asa String
        set self.return-state = RETURN-STATES.ok
        {self.close "close"}
     elseif self.search-area.size == 1 and self.input-tf.value != "" then
        set self.return-value =
            ({self.search-area.list-items.read-one} asa ListItem).value asa String
        set self.return-state = RETURN-STATES.ok
        {self.close "close"}
    }
  }

  {method private {validate?}:bool
    {if self.input-tf.value == "" or self.search-area.size == 0 or
        not (self.input-tf.value != "" and (self.search-area.selected-item-count != 0 or self.search-area.size == 1))
     then
        {return false}
    }
    {return true}
  }
  
  {getter public {input-tf}:CustomTextField
    {if {equal? self._input-tf, null} then
        set self._input-tf =
            {CustomTextField
                width = 13cm,
                {on ValueChanged at tf:CustomTextField do
                    {self.search-area.search-matched-items tf.value asa String}
                }
            }        
    }
    {return {non-null self._input-tf}}
  }

  {getter public {search-area}:AutocompleteSearchControl
    {if {equal? self._search-area , null} then
        set self._search-area =
            {AutocompleteSearchControl
                width = 13cm,
                height = 163pt,
                {on Action at asc:AutocompleteSearchControl do
                    {self.common-ation}
                },
                {on ValueChanged at asc:AutocompleteSearchControl do
                    set self.input-tf.value =
                        {if asc.selected-item-count == 0 then
                            ""
                         else
                            def path-array =
                                {({asc.selected-items.read-one}.value asa String).split split-chars = "."}
                            {path-array.pop} asa String
                        }
                }
            }        
    }
    {return {non-null self._search-area}}
  }

  {getter public {ok-button}:CustomCommandButton
    {if {equal? self._ok-bt , null} then
        set self._ok-bt =
            {CustomCommandButton
                label = "OK",
                {on Action do
                    {if not {self.validate?} then
                        {self.input-tf.request-key-focus}
                        {ErrorMessages.get-error-messages ErrorMessages.SELECT-SINGLE-CLASS}
                        {return}
                    }
                    {if (self.search-area.size == 1 and self.input-tf.value != "")
                        or self.search-area.selected-item-count == 1
                     then                                      
                        {self.common-ation}
                    }
                }
            }        
    }
    {return {non-null self._ok-bt}}
  }

  {getter public {cancel-button}:CustomCommandButton
    {if {equal? self._cancel-bt, null} then
        set self._cancel-bt =
            {CustomCommandButton
                label = "Cancel",
                {on Action do
                    {self.close "close"}
                    set self.return-state = RETURN-STATES.cancel
                }
            }
    }
    {return {non-null self._cancel-bt}}
  }
  
  {getter public {body}:Graphic
    {if {equal? self._body, null} then
        set self._body =
            {VBox
                width = {add-stretch},
                {Frame
                    width = 14cm,
                    height = 6.7cm,
                    valign = "center",
                    halign = "center",
                    {VBox
                        spacing = 4pt,
                        {VBox                                         
                            {create-sepc-label "Choose a class name:"},
                            self.input-tf
                        },
                        {VBox
                            {create-sepc-label "Matching items:"},
                            self.search-area                                     
                        }
                    }
                },
                {Fill height = 10pt},
                {hrule height = 1pt, color = "#ACA899"},
                {Fill height = .2cm},
                {Frame                              
                    width = 14cm,
                    halign = "right",
                    {HBox
                        spacing = 5pt,
                        self.ok-button,
                        self.cancel-button
                    }
                }
            }
    }
    {return {non-null self._body}}
  }
}
