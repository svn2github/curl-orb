||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author ucai Zhang, helped by Yer
|||

||
|| ClassModifierPanel
||
{define-class ClassModifierPanel
  {inherits AbstractPanel}

  field private _class-summary:#ClassSummaryPanel
  field private _fields:#{Array-of FieldPanel}
  field private _constructor:#ConstructorPanel
  field private _methods:#{Array-of MethodPanel}
  field private _generate:#GeneratePanel
  field private _old-data:#ClassProperty
  field private _modified-data:#ClassProperty
  field private _fields-sb:#ScrollBox
  field private _from-screen:#String
  field private _interfaces-as-superclass?:bool
  
  {constructor {default
                   data:ClassProperty,
                   from-screen:String = "",
                   ...
               }
    set self._old-data = data
    set self._from-screen = from-screen
    {construct-super
        header? = false,
        {on AttachEvent do
            {self.class-summary.class.request-key-focus}
        },
        {splice ...}
    }
    {self.add-generate-event}
  }
  
  {method protected {layout-graphic header?:bool}:void
    def summary-panel = {self.create-class-summary-panel} asa ClassSummaryPanel
    def generate-panel = {self.create-generate-panel} asa GeneratePanel
    {summary-panel.class.add-observer generate-panel.class-file-path}
    {self.add-internal
        {Table
            cell-margin = 1mm,
            {row-prototype summary-panel},
            {row-prototype {self.create-fields-panel}},
            {row-prototype {self.create-constructors-panel}},
            {row-prototype {self.create-methods-panel}},
            {row-prototype height = 8pt},
            {row-prototype generate-panel}
        },
        replace? = true
    }
  }  

  {method public {handle-data transfer-data:any}:bool
    {if {equal? transfer-data, null} then
        {return false}
    }
    def td = transfer-data asa HashTable
    def from-screen = td["interfaces-selection"] asa String
    set self.generate.from-screen = from-screen
    {if from-screen == DATA-CLASS or from-screen == EXCEPTION-CLASS then
        set self.generate.test-template-checker.enabled? = false
    }
    set self._interfaces-as-superclass? = td["interfaces-as-superclass"] asa bool
    {return true}
  }

  || add button event for [Generate] button
  {method private {add-generate-event}:void
    {self.generate.generate-button.add-event-handler
        {on Action do
            {if {self.validate?} then                
                def class = {self.create-transfer-object}
                def omt =
                    {switch self._from-screen
                     case DATA-CLASS do
                        ObjectManagementType.data-class
                     case SERVICE-ClASS-DI do
                        ObjectManagementType.service-class-application-context
                     case EXCEPTION-CLASS do
                        ObjectManagementType.exception-class
                     else 
                        ObjectManagementType.service-class-session
                    }
                def interfaces-as-superclass? = self._interfaces-as-superclass? 
                def class-url =
                    {url {non-null self.generate.class-file-path.user-data} asa String}
                def load-check? = self.generate.load-file-path-selector.value
                def as-template? =
                    {if self.generate.test-template-checker.enabled? then
                        self.generate.test-template-checker.value
                     else
                        false
                    }
                {with-busy-cursor
                    {try
                        || it is the code for generating curl code
                        || marked by ucai zhang
                        set self.generate.generate-button.enabled? = false
                        {self.generate-curl-code
                            class,
                            omt,
                            interfaces-as-superclass?,
                            class-url,
                            load-check?,
                            as-template?
                        }
                        set self.generate.generate-button.enabled? = true
                        {ErrorMessages.get-error-messages
                            ErrorMessages.GENERATE-PUTOUT-SUCCEEDED,
                            title = "Message"
                        }
                     catch e:GeneratorException do
                        {ErrorMessages.get-error-messages
                            ErrorMessages.GENERATE-CODE-EXCEPTION
                        }
                    }
                }
            }
        }
    }
  }

  ||check the editable controls in the screen whether their values are validate
  {method private {validate?}:bool
    {if not {self.class-summary.validate?} then
        {return false}
    }
    {for item in self.fields do
        def (validate?, obj) = {item.validate?}
        {if not validate? then
            {(obj asa MultiUIControlFrame).focus-object.request-key-focus}
            let container:Viewport = item.parent.parent asa Viewport                                      
            {(container.scrollbox asa ScrollBox).scroll-to-object obj}
            {return false}
        }
    }
    {for item in self.methods do
        def (validate?, obj) = {item.validate?}
        {if not validate? then
            {(obj asa MultiUIControlFrame).focus-object.request-key-focus}
            let container:Viewport = item.parent.parent asa Viewport                                       
            {(container.scrollbox asa ScrollBox).scroll-to-object obj}
            {return false}
        }
    }
    def (select?, button) = {self.generate.validate?}
    {if not select? then
        {(button asa MultiUIControlFrame).focus-object.request-key-focus}
        {return false}
    }
    {return true}
  }

  || create the object of ClassProperty according to the value on the screen
  {method private {create-transfer-object}:ClassProperty
    ||Class Summary
    def obj = {ClassProperty}
    set obj.name = self.class-summary.package.textField.value & "." & self.class-summary.class.value
    set obj.superclass = self.class-summary.superclass
    set obj.implement-class = self.class-summary.implement-class
    set obj.import-package-names = self.class-summary.import-package-names
    {if-non-null self.class-summary.interface-properties then
        set obj.interface-properties = {{FastArray-of #ClassProperty} self.class-summary.interface-properties}
    }
    set obj.server-class-name = self.class-summary.server-class-name

    ||Field Property
    def field-p = {{Array-of #FieldProperty}}
    {for item in self.fields do
        {if item.need.value then
            {field-p.append item.data}
        }
    }
    set obj.field-properties = {{FastArray-of #FieldProperty} {splice field-p}}

    ||Constructor Property
    {if-non-null self.constructor.constructor-properties then
        set obj.constructor-properties =
            {{FastArray-of #ConstructorProperty}
                self.constructor.constructor-properties
            }
     else
        set obj.constructor-properties = null
    }
    ||Method Property
    def method-p = {{Array-of #MethodProperty}}
    def setter-p = {{Array-of SetterProperty}}
    def getter-p = {{Array-of GetterProperty}}
    {for item in self.methods do
        {if item.need.value then
            {if item.setter.value then
                set item.setter-property.name = item.method-name.textField.value
                {setter-p.append item.setter-property}
             elseif item.getter.value then
                set item.getter-property.name = item.method-name.textField.value
                {getter-p.append item.getter-property}
             else
                set item.data.name = item.method-name.textField.value
                set item.data.async? = item.async.value 
                {method-p.append item.data}
            }            
        }
    }
    set obj.method-properties =
        {{FastArray-of #MethodProperty} {splice method-p}}
    set obj.setters = setter-p
    set obj.getters = getter-p
    {return obj}
  }

  ||it is the interface for scs.
  ||marked by ucai zhang
  {method private {generate-curl-code
                      data:ClassProperty,
                      omt:ObjectManagementType,
                      interfaces-as-superclass?:bool,
                      url:Url,
                      load-file?:bool,
                      as-template?:bool
                  }:void
    {try
        {create-Directory url, create-missing-parents? = true}
     catch efe:ExistingFileException do
     catch mfe:MissingFileException do
        {ErrorMessages.get-error-messages mfe.message}
    }
    def p-generate =
        {proc {class:ClassProperty}:void
            def rv = {StringArray}
            {if-non-null rtev = rte-version then
                {for v key k in rtev do
                    {if v then
                        {rv.append k}
                    }
                }
            }
            {generate-code
                url,
                class,                             
                omt = omt,
                interfaces-as-superclass? = interfaces-as-superclass?,
                create-super-class-methods? = false,
                create-super-classes? = false,
                create-package-file? = load-file?,
                curl-coding-style? = true,
                as-template? = as-template?,
                rte-version = rv
            }
        }
    {p-generate data}
  }

  {method protected {create-class-summary-panel}:Graphic
    {return self.class-summary}
  }

  {method protected {create-fields-panel}:Graphic
    let vb:VBox = {VBox margin = 0pt}
    {for fld in self.fields do
        {vb.add fld}
    }
    {return
        {GroupBox
            label={create-sepc-label "Fields"},
            control-color = BACK-GROUND,
            {Table width = {add-stretch},
                {row-prototype
                    cell-margin = 1pt,
                    {FieldPanel header? = true}
                },
                {row-prototype
                    {ScrollBox
                        shrink-vscroll? = false,
                        height = 78.5pt,
                        vunitsize = 26.36pt,
                        vb
                    }
                }
            }
        }
    }
  }

  {method protected {create-constructors-panel}:Graphic
    {return
        {GroupBox
            label = {create-sepc-label "Constructors"},
            control-color = BACK-GROUND,
            {Table               
                width = {add-stretch},
                {row-prototype
                    {ConstructorPanel
                        header? = true
                    }
                },
                {row-prototype
                    enabled? = not (self._from-screen == DATA-CLASS or self._from-screen == EXCEPTION-CLASS),
                    self.constructor
                }
            }
        }
    }
  }

  {method protected {create-methods-panel}:Graphic
    let vb:VBox = {VBox margin = 0pt}
    {for mtd in self.methods do
        {vb.add mtd}
    }
    {return
        {GroupBox label = {create-sepc-label "Methods"},
            control-color = BACK-GROUND,
            {Table width = {add-stretch},                
                {row-prototype cell-margin = 1pt,
                    {MethodPanel header? = true}
                },
                {row-prototype
                    {ScrollBox
                        shrink-vscroll? = false,
                        height = 78.5pt,
                        vunitsize = 26.36pt,
                        vb
                    }
                }
            }
        }
    }
  }

  {method protected {create-generate-panel}:Graphic
    {return self.generate}
  }

  {getter protected {class-summary}:ClassSummaryPanel
    {if-non-null class-summary = self._class-summary then
        {return class-summary}
     else
        set self._class-summary = {ClassSummaryPanel}
        {self._class-summary.init-date self.old-data}
        {return {non-null self._class-summary}}
    }
  }

  {getter protected {fields}:{Array-of FieldPanel}
    {if-non-null fields = self._fields then
        {return fields}
     else
        set self._fields = {{Array-of FieldPanel}}
        {if-non-null field-properties = self.old-data.field-properties then
            {for field-property in field-properties do
                let field-panel:FieldPanel = {FieldPanel height = 26.27pt}
                {field-panel.init-date field-property}
                {self._fields.append field-panel}
            }
        }
        {return {non-null self._fields}}
    }
  }

  {getter protected {constructor}:ConstructorPanel
    {if-non-null constructor = self._constructor then
        {return constructor}
     else
        set self._constructor = {ConstructorPanel}
        {if self._from-screen == DATA-CLASS or self._from-screen == EXCEPTION-CLASS then
            set self.old-data.constructor-properties = null            
        }
        {self._constructor.init-date self.old-data}
        {return {non-null self._constructor}}
    }
  }

  {getter protected {methods}:{Array-of MethodPanel}
    let value-class?:bool =
        (self._from-screen == DATA-CLASS or self._from-screen == EXCEPTION-CLASS)
    {if-non-null methods = self._methods then
        {return methods}
     else
        def method-hash = {HashTable}
        set self._methods = {{Array-of MethodPanel}}
        {if-non-null method-properties = self.old-data.method-properties then
            {for method-property in method-properties do
                let method-panel:MethodPanel =
                    {MethodPanel
                        height = 26.27pt,
                        value-class? = value-class?
                    }
                {method-panel.init-date method-property}
                def (value, found?) =
                    {method-hash.get-if-exists method-panel.method-name.textField.value}
                
                {if found? then
                    def m-p = (value asa MethodPanel)
                    {if not value-class? then
                        {m-p.need.set-value-with-events true}
                        {method-panel.need.set-value-with-events false}
                    }                    
                 else
                    {method-hash.set method-panel.method-name.textField.value, method-panel}
                }
                {self._methods.append method-panel}
            }
        }
        {return {non-null self._methods}}
    }
  }

  {getter protected {generate}:GeneratePanel
    {if-non-null generate = self._generate then
        {return generate}
     else
        set self._generate = {GeneratePanel self}
        {return {non-null self._generate}}
    }
  }

  {getter public {old-data}:ClassProperty
    {return {non-null self._old-data}}
  }
}

||
|| ClassSummaryPanel
||
{define-class public ClassSummaryPanel {inherits AbstractPanel}
  
  field private _package:#StyleTextField
  field private _class:#CustomTextField
  field private _server-class:#CustomTextDisplay
  field private _import:#CustomDropdownList
  field private _super-class:#CustomTextDisplay
  field private _interfaces:#CustomDropdownList

  field private _name:#String
  field private _superclass:#ClassProperty
  field private _interface-properties:#ClassProperty

  field private transient _import-package-names:{Set-of String} = {{Set-of String}}
  
  field private _implement-class:#ClassProperty
  field private _server-class-name:#String
  
  {constructor public {default ...}
    {construct-super  {splice ...}}
  }

  {method protected {layout-graphic header?:bool}:void
    {self.add-internal
        {Table
            font-size = LABEL-FONT-SIZE,
            halign = "right", valign = "center",
            {row-prototype
                {skip 6},
                {Fill height = 3pt}
            },
            
            {row-prototype
                {create-sepc-label "Package"}, self.package,
                {create-sepc-label "Import"}, self.import,
                {create-sepc-label "Class"}, self.class,
                {create-sepc-label "Server Class"}, self.server-class
            },
            {row-prototype
                {skip 4},
                {create-sepc-label "Super Class"}, self.super-class,
                {create-sepc-label "Interfaces"}, self.interfaces
            }
        }
        , replace? = true
    }
  }

  {method package {init-date data:ClassProperty}:void
    || package/class name
    def (my-class-name, my-package-name) =
        {ClassBuilderUtil.split-class-name
            {non-null data.name},
            curl-coding-style? = true
        }

    set self.packagename =  data.name
    set self.superclass = data.superclass
    set self.implement-class = data.implement-class
    set self.server-class-name = data.server-class-name
    set self.import-package-names = data.import-package-names
    
    set self.package.textField.value = my-package-name
    {if my-package-name != "" then
        set self.package.tooltip = {Tooltip my-package-name}
    }
    set self.package.oldValue =  my-package-name
    set self.class.value = my-class-name
    set self.server-class.value = {String data.server-class-name}
    set self.server-class.tooltip = {Tooltip {String data.server-class-name}}
    {if not {equal? data.superclass, null} and  not {equal? data.superclass.name, null} then
        let name:String = {non-null data.superclass.name}
        set self.super-class.value = {name.tail {name.find '.', search-direction="backward"} + 1}
        set self.super-class.tooltip = {Tooltip self.super-class.value}
    }

    {if-non-null interface-properties = data.interface-properties then
        {self.interfaces.append ""}
        {for interface in interface-properties do
            {if-non-null name = interface.name then
                let interface-name:String = {name.tail {name.find '.', search-direction = "backward"} + 1}
                {if not{interface-name.equal? "Serializable", ignore-case? = true} then
                    def item = {ListValueItem  interface-name, label = interface-name, value = interface}
                    set item.width = 87pt
                    set item.tooltip = {Tooltip interface-name}
                    {self.interfaces.append item}                    
                    
                }
            }
        }
    }
    
    {for pac in data.import-package-names do
        def item = {ListValueItem  pac}
        set item.width = 90pt
        set item.tooltip = {Tooltip pac}
        {self.import.append  item }
    }

    {if self.interfaces.data-model.size > 1 then
        {if self.interfaces.data-model.size > 3 then
            set self.interfaces.dropdown-height = 50pt
        }
        {self.interfaces.select-index-with-events 1}
     else
        {self.interfaces.select-index-with-events 0}
    }
    {if self.import.data-model.size > 0 then
        {if self.import.data-model.size > 3 then
            set self.import.dropdown-height = 43pt
        }
        {self.import.select-index-with-events 0}
    }
  }
  
  {getter public {package}:StyleTextField
    {if {equal? self._package, null} then
        set self._package = {StyleTextField editable? = false}
    }
    {return {non-null self._package}}
  }

  {getter public {class}:CustomTextField
    {if {equal? self._class, null} then
        set self._class = {CustomTextField
                              vorigin = "center",
                              {on ValueFinished do
                                  set self.packagename = self.package.textField.value & "." & {(self.class.value asa String).trim-clone}
                              }
                          }
    }
    {return {non-null self._class}}
  }

  {getter public {server-class}:CustomTextDisplay
    {if {equal? self._server-class, null} then
        set self._server-class = {CustomTextDisplay vorigin = "center"}
    }
    {return {non-null self._server-class}}
  }

  {getter public {import}:CustomDropdownList
    {if {equal? self._import, null} then
        set self._import = {CustomDropdownList
                               vorigin = "center",
                               {on ValueFinished at dl:CustomDropdownList do
                                   set self.import.tooltip = {Tooltip dl.selected-item.value}
                               }
                           }
    }
    {return {non-null self._import}}
  }

  {getter public {super-class}:CustomTextDisplay
    {if {equal? self._super-class, null} then
        set self._super-class = {CustomTextDisplay  vorigin = "center"}
    }
    {return {non-null self._super-class}}
  }

  {getter public {interfaces}:CustomDropdownList
    {if {equal? self._interfaces, null} then
        set self._interfaces = {CustomDropdownList
                                   vorigin = "center",
                                   {on ValueFinished at dl:CustomDropdownList do
                                       {if dl.value != "" and dl.value != null then
                                           set self.interface-properties = dl.value asa ClassProperty
                                           set self.interfaces.tooltip = {Tooltip {dl.selected-item.get-text}}
                                        else                                           
                                           set self.interfaces.tooltip = null
                                           set self.interface-properties = null
                                       }
                                   }
                               }
    }
    {return {non-null self._interfaces}}
  }

  {setter public open {packagename _name:#String}:void
    set self._name = _name
  }
  {getter public open {packagename}:#String
    {return self._name}
  }
  
  {setter public open {superclass _superclass:#ClassProperty}:void
    set self._superclass = _superclass
  }
  {getter public open {superclass}:#ClassProperty
    {return self._superclass}
  }

  {setter public open {interface-properties _interface-properties:#ClassProperty}:void
    set self._interface-properties = _interface-properties
  }
  {getter public open {interface-properties}:#ClassProperty
    {return self._interface-properties}
  }
  

  {setter public open {server-class-name _server-class-name:#String}:void
    set self._server-class-name = _server-class-name
  }
  {getter public open {server-class-name}:#String
    {return self._server-class-name}
  }

  {setter public open {implement-class _implement-class:#ClassProperty}:void
    set self._implement-class = _implement-class
  }
  {getter public open {implement-class}:#ClassProperty
    {return self._implement-class}
  }

  {setter public open {import-package-names _import-package-names:{Set-of String}}:void
    set self._import-package-names = _import-package-names
  }
  {getter public open {import-package-names}:{Set-of String}
    {return self._import-package-names}
  }
  
  {method public {validate?}:bool
    {if {equal? {{String self.class.value}.trim-clone} , ""} then
        {ErrorMessages.get-error-messages ErrorMessages.NON-NULL-MESSAGE, "Class"}
        {self.class.focus-object.request-key-focus}
        set self.class.value = ""
        {return false}
     else
        {return true}
        
    }
    
  }

}

||
|| FieldPanel
||
{define-class public FieldPanel {inherits AbstractPanel}

  field private _field-name:#CustomTextField
  field private _need:#CheckButton
  field private _modifier:#CustomDropdownList
  field private _static:#CheckButton

  field private _data:#FieldProperty

  field private _tip:#Tooltip 
  
  {constructor public {default header?:bool = false, ...}
    {construct-super header? = header?, ...}
  }

  {method protected {layout-graphic header?:bool}:void
    {self.add-internal        
        {if header? then
            {Table 
                font-size = 11pt,
                {row-prototype 
                    {Frame "name" , halign = "center" , width = 255},
                    {Frame "need?" , halign = "center" , width = 48},
                    {Frame "modifier", halign = "center" , width = 100},
                    {Frame "static?", halign = "center", width = 45}
                }
            }
         else
            {Table width = 450, halign = "center",
                {row-prototype
                    {Frame self.field-name , halign = "center" , width = 250},
                    {Frame self.need , halign = "center",width = 40},
                    {Frame self.modifier , halign = "center" , width = 100},
                    {Frame self.static , halign = "center" , width = 40}
                }
            }
        } , replace? = true
    }
  }

  {method package {init-date data:#FieldProperty}:void

    set self.data = data
    {if-non-null d = data then
        {self.field-name.set-value-with-events
            {change-to-curl-style {if {equal? d.name, null} then "" else {non-null d.name}}}
        } 
        {if-non-null type = data.type then
            let tooltip:String = {type.tail {type.find '.', search-direction = "backward"} + 1}
            set self.field-name.tooltip = {Tooltip tooltip}
            set self._tip = self.field-name.tooltip
        }

        {if-non-null d.modifier then
            let modifier:{Array-of String} = {d.modifier.split}
            {for s in modifier do
                {if {{get-modifier-data-model}.find s} != -1 then
                    {self.modifier.set-value-with-events s}
                 elseif {equal? s , "static"} then
                    {self.static.set-value-with-events true}
                 elseif {equal? s , "transient"} then
                    set self.modifier.user-data = "transient"
                    {if-non-null self.modifier.selected-item then                       
                        {self.modifier.set-value-with-events self.modifier.selected-item.value}
                     else
                        {self.modifier.set-value-with-events "package"}
                        {if-non-null field-data = self.data then
                            set field-data.modifier = "package"
                        }
                    }
                }
            }
        }
        {if self.modifier.selected-item == "" or self.modifier.selected-item == null then
            {self.modifier.set-value-with-events "package"}
            {if-non-null field-data = self.data then
                set field-data.modifier = "package"
            }
        }
    }
  }
  
  {getter public {field-name}:CustomTextField
    {if {equal? self._field-name , null} then
        set self._field-name =
            {CustomTextField vorigin = "center",
                {on ValueFinished do
                    {if-non-null self.data then
                        set self.data.name =
                            {(self.field-name.value asa String).trim-clone}
                    }
                }
            }
    }
    {return {non-null self._field-name}}
  }

  {getter public {need}:CheckButton
    {if {equal? self._need, null} then
        set self._need =
            {CheckButton
                vorigin = "center",
                label = null ,
                value = true,
                {on ValueFinished at btn:CheckButton do
                    set self._modifier.enabled? = btn.value
                    set self._field-name.enabled? = btn.value
                    {if btn.value then
                        set self.field-name.tooltip = self._tip
                     else
                        set self.field-name.tooltip = null
                    }
                }
            }
    }
    {return {non-null self._need}}
  }
  
  {getter public {modifier}:CustomDropdownList
    {if {equal? self._modifier, null} then
        set self._modifier =
            {CustomDropdownList
                vorigin = "center",
                data-model = {get-modifier-data-model},
                {on ValueFinished at cdl:CustomDropdownList do
                    {if-non-null field-data = self.data then
                        let static-str:String = ""
                        {if self.static.value then
                            set static-str = " static"
                        }
                        {if-non-null user-data = cdl.user-data then
                            set field-data.modifier = (cdl.selected-item.value asa String) & static-str & " " & (user-data asa String)
                         else
                            set field-data.modifier = (cdl.selected-item.value asa String) & static-str
                        }
                    }
                    
                }
            }
    }
    {return {non-null self._modifier}}
  }

  {getter public {static}:CheckButton
    {if {equal? self._static , null} then
        set self._static =
            {CheckButton
                               vorigin = "center",
                               label = null,
                               enabled? = false,
                               {on ValueChanged at cb:CheckButton do
                                   {if-non-null self.data , self.data.modifier then
                                       def static-value = {if cb.value then " static" else ""}
                                       set self.data.modifier = self.modifier.selected-item.value & static-value
                                       {if cb.value then
                                           {self.need.set-value-with-events not cb.value}
                                       }
                                   }
                               }
                           }
    }
    {return {non-null self._static}}
  }

  {setter public {data field:#FieldProperty}:void
    set self._data = field
  }
  {getter public {data }:#FieldProperty
    {return self._data}
  }

  {method public {validate?}:(bool , any)
    {if (self.need.value and {{String self.field-name.value}.trim-clone} == "") then        
        {ErrorMessages.get-error-messages ErrorMessages.NON-NULL-MESSAGE , "field name"}
        set self.field-name.value = ""
        {return (false , self.field-name)}                
    }

    {if (self.need.value and (self.modifier.value == "" or self.modifier.value == null)) then
        {ErrorMessages.get-error-messages ErrorMessages.NON-NULL-MESSAGE , "field modifer"}
        {return (false , self.modifier)}                
    }
    {return (true , null)}
  }

}

||
|| ConstructorPanel
||
{define-class public ConstructorPanel {inherits AbstractPanel}
  
  field private _constructor-name:#CustomDropdownList
  field private _modifier:#CustomDropdownList

  field private _constructor-properties:#ConstructorProperty
  
  {constructor public {default header?:bool = false , ...}
    {construct-super header? = header? , ...}
  }

  {method protected {layout-graphic header?:bool}:void
    {self.add-internal
        {if header? then
            {Table
                font-size = 11pt,
                cell-margin = 0pt,
                {row-prototype
                    {Frame "name" , halign = "center", width = 250},
                    {Frame width = 50},
                    {Frame "modifier" , halign = "center" , width = 100}
                }
            }
         else
            {Table
                {row-prototype
                    halign = "center" , valign = "center",
                    {Frame self.constructor-name , halign = "center" , width = 250},
                    {Frame width = 38},
                    {Frame self.modifier , halign = "center", width = 100}
                }
            }
        } , replace? = true
    }
  }

  {method package {init-date data:ClassProperty}:void
    
    {if-non-null constructor-properties = data.constructor-properties then
        {self.constructor-name.append  {ListValueItem ""}}                
        {for constructor in constructor-properties do
            {if-non-null argument-types = constructor.argument-types then
                let type-string:StringBuf = {StringBuf "default "}
                {for i:int = 0 to argument-types.size - 1 do
                    let type:String = {non-null argument-types[i]}
                    {type-string.concat "v" & i & ":" & {type.tail {type.find '.' , search-direction = "backward"} + 1} & ", "}
                }
                {if {type-string.suffix? ", "} then
                    {type-string.remove (type-string.size - 2) , length = 2}
                }
                def item = {ListValueItem {type-string.to-String} , value = constructor}
                set item.width = 250pt
                set item.tooltip = {Tooltip {type-string.to-String}}
                {self.constructor-name.append  item}
            }
        }

        {if self.constructor-name.data-model.size > 1 then
            {self.constructor-name.select-index-with-events 1}
            def cur-modifier = (self.constructor-name.selected-item.value asa ConstructorProperty).modifier
            {self.modifier.set-value-with-events
                {if cur-modifier == "" then "package" else cur-modifier}
            }
            set self.constructor-properties = self.constructor-name.selected-item.value asa ConstructorProperty
            set self.constructor-name.tooltip = {Tooltip {self.constructor-name.selected-item.get-text}}
            {if self.constructor-name.data-model.size > 2 then
                set self.constructor-name.dropdown-height = 50pt
            }
         else
            {self.constructor-name.select-index-with-events 0}
        }     
        
        {if self.modifier.selected-item == "" or self.modifier.selected-item == null then
            {self.modifier.set-value-with-events "package"}
            {if-non-null constructor-data = self.constructor-properties then
                set constructor-data.modifier = "package"
            }
        }
    }

  }
  {getter public {constructor-name}:CustomDropdownList
    {if {equal? self._constructor-name , null} then
        set self._constructor-name =
            {CustomDropdownList
                {on ValueChanged at dd:CustomDropdownList do
                    {if dd.selected-item.value != "" and dd.selected-item.value != null then
                        set self.constructor-properties = dd.selected-item.value asa ConstructorProperty
                        set self.constructor-name.tooltip = {Tooltip {dd.selected-item.get-text}}
                        {self.modifier.set-value-with-events
                            {if self.constructor-properties.modifier == "" then
                                "package"
                             else
                                self.constructor-properties.modifier
                            }
                        }
                     else
                        set self.constructor-properties = null
                        set self.constructor-name.tooltip = null
                    }
                }
            }
        
    }
    {return {non-null self._constructor-name}}
  }

  
  {getter public {modifier}:CustomDropdownList
    {if {equal? self._modifier , null} then
        set self._modifier =
            {CustomDropdownList
                data-model = {get-modifier-data-model},
                {on ValueChanged at dd:CustomDropdownList do
                    {if self.constructor-name.selected-item.value != "" and self.constructor-name.selected-item.value != null then
                        {if-non-null self.constructor-properties then
                            set self.constructor-properties.modifier = dd.selected-item.value asa String
                         else
                            set self.constructor-properties = null
                        }
                    }
                }
            }
    }
    {return {non-null self._modifier}}
  }

  {setter public {constructor-properties _constructor-properties:#ConstructorProperty}:void
    set self._constructor-properties = _constructor-properties
  }
  {getter public {constructor-properties}:#ConstructorProperty
    {return self._constructor-properties}
  }
}

||
|| MethodsPanel
||
{define-class public MethodPanel {inherits AbstractPanel}
  
  field private _method-name:#StyleTextField
  field private _need:#CheckButton
  field private _modifier:#CustomDropdownList
  field private _static:#CheckButton
  field private _async:#CheckButton
  field private _getter:#CheckButton
  field private _setter:#CheckButton

  field private _value-class?:bool

  field private _data:#MethodProperty
  field private _setter-property:SetterProperty = {SetterProperty "" , "" , ""}
  field private _getter-property:GetterProperty = {GetterProperty "" , "" , ""}

  field private _tip:#Tooltip

  field private _setter?:bool = false
  field private _getter?:bool = false
  
  {constructor public {default
                          header?:bool = false,
                          value-class?:bool = false,
                          ...
                      }
    set self._value-class? = value-class?
    {construct-super
        header? = header?,
        ...
    }
  }

  {method protected {layout-graphic header?:bool}:void
    {self.add-internal
        {if header? then
            {Table
                font-size = 11pt,
                {row-prototype
                    halign = "right", valign = "center",
                    {Frame "name" , halign = "center" , width = 255},
                    {Frame "need?" , halign = "center", width = 43},
                    {Frame "modifier" , halign = "center" , width = 105},
                    {Frame "static?", halign = "center" , width = 48},
                    {Frame "async?" , halign = "center" , width = 52},
                    {Frame "getter" , halign = "center" , width = 40},
                    {Frame "setter" , halign = "center" , width = 45}
                }
            }
         else
            {Table
                {row-prototype
                    halign = "center", valign = "center",
                    {Frame self.method-name , halign = "center" , width = 250},
                    {Frame self.need , halign = "center" , width = 38},
                    {Frame self.modifier , halign = "center" , width = 100},
                    {Frame self.static , halign = "center" , width = 40},
                    {Frame self.async , halign = "center" , width = 50},
                    {Frame self.getter , halign = "center" , width = 40},
                    {Frame self.setter , halign = "center" , width = 40}
                }
            }
        }, replace? = true
    }
  }

  {method package {init-date data:#MethodProperty}:void
    set self.data = data
    {if-non-null d = data then
        set self.method-name.textField.value =
            {if {equal? d.name, null} then
                ""
             else
                {non-null d.name}
            }
        set self.method-name.javaName =
            {if {equal? data.server-method-name, null} then
                ""
             else {non-null data.server-method-name}
            }
        set self.method-name.oldValue = self.method-name.textField.value
        def args-buf = {StringBuf}
        {if-non-null arg-types = d.argument-types then
            {for arg-type key i in arg-types do
                {if i > 0 then
                    {args-buf.concat ", "} 
                }
                def at = {non-null arg-type}
                {args-buf.concat {at.tail {at.find '.', search-direction = "backward"} + 1}}
            }
        }
        def return-type = 
            {d.return-type.tail {d.return-type.find '.', search-direction = "backward"} + 1}
        set self.method-name.tooltip = 
            {Tooltip {format "\{ %s \}:%s", {args-buf.to-String}, return-type}}
        set self._tip = self.method-name.tooltip
        set self.user-data =
            {{HashTable-of any, any}
                "return-type", {return-type.trim-clone},
                "arguments", {{args-buf.to-String}.trim-clone}
            }

        || FIXED: aBC, getABC -> a-bc, get-a-bc 
        || set self.method-name.textField.value = {change-to-curl-style self.method-name.textField.value
        set self.method-name.textField.value =
            {if d.getter? or d.setter? then
                ||{change-to-curl-style self.method-name.textField.value}
                def tmp-name = self.method-name.textField.value
                def buf = {StringBuf}
                {buf.concat {tmp-name.substr 0, 3}}
                {buf.append '-'}
                {buf.concat {change-to-curl-style {{tmp-name.substr 3, 1}.to-lower-clone} & {tmp-name.tail 4}}}
                {buf.to-String}
             else
                {change-to-curl-style self.method-name.textField.value}
            }
        set self.method-name.original-value = self.method-name.textField.value
        set self.method-name.oldValue = self.method-name.textField.value
        {if-non-null d.name then
            set d.name = self.method-name.textField.value
        }
        
        {if-non-null d.modifier then
            let modifier:{Array-of String} = {d.modifier.split}
            {for s in modifier do
                {if {{get-modifier-data-model}.find s} != -1 then
                    {self.modifier.set-value-with-events s}
                 elseif {equal? s, "static"} then
                    {self.static.set-value-with-events true}
                    ||add by ucai zhang
                 elseif {equal? s, "transient"} then
                    set self.modifier.user-data = "transient"
                    {if-non-null self.modifier.selected-item then                       
                        {self.modifier.set-value-with-events self.modifier.selected-item.value}
                     else
                        {self.modifier.set-value-with-events "package"}
                    }
                    ||add end
                }
            }
        }
        {if self.modifier.selected-item == "" or self.modifier.selected-item == null then
            {self.modifier.set-value-with-events "package"}
        }
        {if self._value-class? then
            set self._setter? = data.setter?
            set self._getter? = data.getter?
            {self.setter.set-value-with-events data.setter?}
            {self.getter.set-value-with-events data.getter?}
            {if not data.setter? and not data.getter? then
                {self.need.set-value-with-events false}
                set self.need.enabled? = false
            }
        }
        {if self._value-class? then
            set self.async.enabled? = false
         else
            {self.async.set-value-with-events d.async?}
        }
    }
  }
  
  {getter public {method-name}:StyleTextField
    {if {equal? self._method-name , null} then
        set self._method-name = {StyleTextField}
        {self._method-name.textField.add-event-handler
            {on ValueFinished at tf:TextField do
                def cur-value = {(self.method-name.textField.value asa String).trim-clone}
                set self.method-name.oldValue = tf.value asa String
                {if self.setter.value  then
                    set self.setter-property.name = cur-value
                 elseif self.getter.value then
                    set self.getter-property.name = cur-value
                 else
                    set self.data.name = cur-value
                }
            }
        }
    }
    {return {non-null self._method-name}}
  }

  {getter public {need}:CheckButton
    {if {equal? self._need , null} then
        set self._need =
            {CheckButton
                vorigin = "center",
                label = null,
                value = true,
                {on ValueFinished at btn:CheckButton do
                    {if self._value-class? then                                                                         
                        set self._modifier.enabled? = btn.value
                        set self._method-name.editable? = btn.value
                        set self._getter.enabled? = btn.value
                        set self._setter.enabled? = btn.value                                                                                                                
                     else                      
                        set self._async.enabled? = btn.value
                        set self._modifier.enabled? = btn.value                 
                        set self._method-name.editable? = btn.value
                    }

                    {if btn.value then
                        set self.method-name.tooltip = self._tip
                     else
                        set self.method-name.tooltip = null
                    }
                }
            }
    }
    {return {non-null self._need}}
  }
  
  {getter public {modifier}:CustomDropdownList
    {if {equal? self._modifier , null} then
        set self._modifier =
            {CustomDropdownList
                vorigin = "center" ,
                data-model = {get-modifier-data-model},
                {on ValueFinished at cdl:CustomDropdownList do
                    def modifer-str = cdl.selected-item.value asa String
                    def static-str = {if self.static.value then " static" else ""}
                    let transient-str:String = ""
                    {if-non-null self.modifier.user-data then
                        set transient-str = self.modifier.user-data asa String
                    }
                    {if self.setter.value then
                        self.setter-property 
                        set self.setter-property.modifier = modifer-str & transient-str & " "& static-str
                     else                                      
                        set self.getter-property.modifier = modifer-str & transient-str & " " & static-str
                        
                    }
                    {if-non-null method-data = self.data then
                        set method-data.modifier = modifer-str & transient-str & " " & static-str
                    }
                }
            }
    }
    {return {non-null self._modifier}}
  }

  {getter public {static}:CheckButton
    {if {equal? self._static , null} then
        set self._static =
            {CheckButton
                vorigin = "center",
                label = null,
                enabled? = false
            }
    }
    {return {non-null self._static}}
  }

  {getter public {async}:CheckButton
    {if {equal? self._async , null} then
        set self._async =
            {CheckButton vorigin = "center" , label = null,
                {on ValueChanged do
                    def text-value = {{String self.method-name.textField.value}.trim-clone}
                    {if self.async.value and self._value-class? then
                        set self.setter.value = false
                        set self.getter.value = false
                    }
                    set self.data.async? = self.async.value
                    {if self.async.value and self.data != null then
                        set self.data.name = self.method-name.textField.value
                    }
                    {if {text-value.equal? self.method-name.div-javaName} then
                        set self.method-name.textField.value = self.method-name.javaName
                     elseif {text-value.equal? self.method-name.div-original-value} then
                        set self.method-name.textField.value = self.method-name.original-value
                     else
                        set self.method-name.textField.value = text-value
                    }
                }
            }
    }
    {return {non-null self._async}}
  }

  {getter public {getter}:CheckButton
    {if {equal? self._getter , null} then
        set self._getter =
            {CheckButton vorigin = "center" , label = null , enabled? = self._value-class?,
                {on ValueChanged do
                    def text-value = {{String self.method-name.textField.value}.trim-clone}
                    def type = self.user-data asa HashTable
                    def return-type = {type.get "return-type"} asa String
                    def arguments = {type.get "arguments"} asa String
                    {if self.getter.value then
                        set self.setter.value = not self.getter.value
                        set self.async.value = not self.getter.value
                        set self.modifier.value = "public"
                        set self.getter-property =
                            {GetterProperty
                                self.method-name.textField.value,
                                {if self._getter? then
                                    return-type
                                 else
                                    arguments
                                },
                                {non-null self.modifier.value} asa String
                            }
                        {if ({text-value.prefix? "get-"} or {text-value.prefix? "set-"} or {text-value.prefix? "is-"} ) and
                            ({text-value.equal? self.method-name.original-value})
                         then
                            {if {text-value.prefix? "is-"} then
                                set self.method-name.textField.value = {text-value.substr 3 , text-value.size - 3}
                             else
                                set self.method-name.textField.value = {text-value.substr 4 , text-value.size - 4}
                            }                                           
                         elseif ({text-value.prefix? "get"} or {text-value.prefix? "set"} or {text-value.prefix? "is"}) and {text-value.equal? self.method-name.javaName} then
                            {if  {text-value.prefix? "is"} then
                                set self.method-name.textField.value = {text-value.substr 2 , text-value.size - 2}
                             else
                                set self.method-name.textField.value = {text-value.substr 3 , text-value.size - 3}
                            }
                         else
                            set self.method-name.textField.value = text-value
                        }
                     else                                       
                        set self.getter-property = {GetterProperty "" , "" , ""}
                        set self.setter.value = self.getter.value
                        set self.async.value = self.getter.value
                        {if {text-value.equal? self.method-name.div-javaName} then
                            set self.method-name.textField.value = self.method-name.javaName
                         elseif {text-value.equal? self.method-name.div-original-value} then
                            set self.method-name.textField.value = self.method-name.original-value
                        }
                    }
                }
            }
    }
    {return {non-null self._getter}}
  }

  {getter public {setter}:CheckButton
    {if {equal? self._setter, null} then
        set self._setter =
            {CheckButton
                vorigin = "center",
                label = null,
                enabled? = self._value-class?,
                {on ValueChanged do
                    def text-value = {{String self.method-name.textField.value}.trim-clone}
                    {if self.setter.value then
                        set self.getter.value = not self.setter.value
                        set self.async.value = not self.setter.value
                        set self.modifier.value = "public"
                        def type = self.user-data asa HashTable
                        def return-type = {type.get "return-type"} asa String
                        || setter needs sharp(#).
                        def arguments = {add-sharp {type.get "arguments"} asa String}
                        set self.setter-property =
                            {SetterProperty
                                self.method-name.textField.value,                                                                      
                                {if self._setter? then
                                    arguments
                                 else                                                                          
                                    return-type
                                },
                                {non-null self.modifier.value} asa String
                            }
                        {if ({text-value.prefix? "get-"} or
                             {text-value.prefix? "set-"} or
                             {text-value.prefix? "is-"}) and
                            ({text-value.equal? self.method-name.original-value})
                         then
                            set self.method-name.textField.value = 
                                {if {text-value.prefix? "is-"} then
                                    {text-value.substr 3 , text-value.size - 3}
                                 else
                                    {text-value.substr 4 , text-value.size - 4}
                                }  
                         elseif ({text-value.prefix? "get"} or {text-value.prefix? "set"} or {text-value.prefix? "is-"} ) and {text-value.equal? self.method-name.javaName} then
                            set self.method-name.textField.value = 
                                {if {text-value.prefix? "is"} then
                                    {text-value.substr 2 , text-value.size - 2}
                                 else
                                    {text-value.substr 3 , text-value.size - 3}
                                }
                         else
                            set self.method-name.textField.value = text-value
                        }
                     else
                        set self.setter-property = {SetterProperty "" , "" , ""}
                        set self.getter.value = self.setter.value
                        set self.async.value = self.setter.value
                        {if {text-value.equal? self.method-name.div-javaName} then
                            set self.method-name.textField.value = self.method-name.javaName
                         elseif {text-value.equal? self.method-name.div-original-value} then
                            set self.method-name.textField.value = self.method-name.original-value
                        }                                           
                    }
                }
            }
    }
    {return {non-null self._setter}}
  }

  {setter public {setter-property sp:SetterProperty}:void
    set self._setter-property = sp
  }
  
  {getter public {setter-property}:SetterProperty
    {return self._setter-property}
  }

  {setter public {getter-property sp:GetterProperty}:void
    set self._getter-property = sp
  }
  
  {getter public {getter-property}:GetterProperty
    {return self._getter-property}
  }
  
  {setter public {data mp:#MethodProperty}:void
    set self._data = mp
  }
  
  {getter public {data }:#MethodProperty
    {return self._data}
  }

  {method public {validate?}:(bool, any)
    {if (self.need.value and {{String self.method-name.textField.value}.trim-clone} == "") then
        {ErrorMessages.get-error-messages ErrorMessages.NON-NULL-MESSAGE, "method name"}
        set self.method-name.textField.value = ""
        {return (false , self.method-name.textField)}                
    }

    {if (self.need.value and (self.modifier.value == "" or self.modifier.value == null)) then
        {ErrorMessages.get-error-messages ErrorMessages.NON-NULL-MESSAGE, "method modifer"}
        {return (false, self.modifier)}                
    }
    {return (true, null)}
  }
  
}

||
|| GeneratePanel
||
{define-class GeneratePanel {inherits AbstractPanel}

  field private _class-file-path:#CustomTextDisplay
  field private _class-file-path-selector:#CustomCommandButton
  field private _load-file-path-selector:#CheckButton
  field private _generate-button:#CustomCommandButton
  field private _cancel-button:#CustomCommandButton
  field private _top-button:#CustomCommandButton
  field private _back-button:#CustomCommandButton
  field private _test-template-checker:#CheckButton
  field private _pre-dir:#Url = null
  field private _from-screen:#String
  field private _class-modifier-panel:ClassModifierPanel
  
  {constructor {default class-modifier-panel:ClassModifierPanel, ...}
    set self._class-modifier-panel = class-modifier-panel
    {construct-super
        {splice ...}
    }
  }  
  
  {method protected {layout-graphic header?:bool}:void
    {self.add-internal
        {Table
            font-size = LABEL-FONT-SIZE, valign = "center",
            {row-prototype
                cell-margin = 2pt,
                {create-sepc-label "Class File"},
                self.class-file-path,
                self.class-file-path-selector,
                {CustomCommandButton
                    label = "Clear",
                    width = 35pt,
                    {on Action do
                        set self.class-file-path.value = ""
                        set self.class-file-path.user-data = null
                        set self.class-file-path.tooltip = null
                    }
                },
                {Fill }
            },
            {row-prototype
                cell-margin = 1.2pt,
                {create-sepc-label "Load File"},
                {cell-prototype
                    {HBox
                        spacing = 7pt,                       
                        self.load-file-path-selector,
                        {Fill width = 10pt},
                        {create-sepc-label "With tests' template"},
                        self.test-template-checker
                    }
                },
                {Fill height = 20pt}
            },
            {row-prototype
                {cell-prototype
                    {Fill height = 1pt},
                    colspan = 6, halign = "center", valign = "center"}
            },
            {row-prototype
                {cell-prototype
                    {hrule color = "#ACA899", height = 1px},
                    colspan = 6, halign = "center", valign = "center"}
            },
            {row-prototype
                {cell-prototype
                    colspan = 6,
                    {Table
                        cell-margin = 0pt,
                        width = 765,
                        {row-prototype
                            self.top-button,
                            self.back-button,
                            {Fill width = 520pt},
                            self.generate-button,
                            self.cancel-button
                            
                        }
                    }
                }
            }
        },
        replace? = true
    }    
  }

  {setter public {from-screen name:String}:void
    set self._from-screen = name 
  }

  {getter public {from-screen}:#String
    {return self._from-screen}
  }
  
  {getter public {class-file-path}:CustomTextDisplay
    {if {equal? self._class-file-path, null} then       
        def class-name = self._class-modifier-panel.class-summary.class.value asa String
        let path:String =
            {if base-dir.empty? then
                ""
             else                              
                base-dir & self.get-detail-package-pathes & "/" & class-name & ".scurl"
            }
        set self._class-file-path = {CustomTextDisplay width = 407pt, value = path}
        set self._class-file-path.tooltip = {if base-dir.empty? then null else {Tooltip path}}
        set self._class-file-path.user-data = base-dir & self.get-detail-package-pathes
    }
    {return {non-null self._class-file-path}}
  }

  {getter public {class-file-path-selector}:CustomCommandButton
    {if {equal? self._class-file-path-selector, null} then
        set self._class-file-path-selector =
            {CustomCommandButton
                label = "File",
                width = 35pt,
                {on Action do
                    def default-location =
                        {if-non-null self._pre-dir then
                            self._pre-dir
                         else
                            {url base-dir}
                        }
                    {if-non-null url = {choose-directory default-location = default-location} then
                        def pak-path = self.get-detail-package-pathes
                        set self._pre-dir = url
                        set self.class-file-path.value = url.full-filename & "/"& self._class-modifier-panel.class-summary.class.value & ".scurl"
                        set self.class-file-path.user-data = url.full-filename
                        set self.class-file-path.tooltip = {Tooltip self.class-file-path.value}
                    }
                }
            }
    }
    {return {non-null self._class-file-path-selector}}
  }

  {getter public {get-detail-package-pathes}:String
    def pak-pathes =
        {(self._class-modifier-panel.class-summary.package.textField.value asa String).split split-chars = "."}
    let pak-path-str:String = ""
    {for item in pak-pathes do
        set pak-path-str = pak-path-str & "/" & item
    }
    {return pak-path-str}
  }

  {getter public {load-file-path-selector}:CheckButton
    {if {equal? self._load-file-path-selector, null} then
        set self._load-file-path-selector =
            {CheckButton
                label = "" ,
                value = true
            }
    }
    {return {non-null self._load-file-path-selector}}
  }

  {getter public {test-template-checker}:CheckButton
    {if {equal? self._test-template-checker, null} then
        set self._test-template-checker =
            {CheckButton
                label = ""
            }
    }
    {return {non-null self._test-template-checker}}
  }

  {getter public {generate-button}:CustomCommandButton
    {if {equal? self._generate-button, null} then
        set self._generate-button =
            {CustomCommandButton label = "Generate"}
    }
    {return {non-null self._generate-button}}
  }

  {getter public {cancel-button}:CustomCommandButton
    {if {equal? self._cancel-button, null} then
        set self._cancel-button =
            {CustomCommandButton
                label = "Cancel",
                {on Action do
                    {{self.get-view}.close}
                }
            }
    }
    {return {non-null self._cancel-button}}
  }
  
  {getter public {top-button}:CustomCommandButton
    {if {equal? self._top-button, null} then
        set self._top-button =
            {CustomCommandButton
                label = "Top",
                {on Action do
                    {with-busy-cursor
                        {change-body {ClassSelectionPanel}}
                    }
                }
            }
    }
    {return {non-null self._top-button}}
  }
  
  {getter public {back-button}:CustomCommandButton
    {if {equal? self._back-button, null} then
        set self._back-button =
            {CustomCommandButton
                label = "Back",
                {on Action do
                    {if-non-null self.from-screen then
                        {if self.from-screen == INTERFACES-SELECTION then
                            {with-busy-cursor
                                {change-body {InterfacesSelectionScreen}}
                            }
                         else
                            {with-busy-cursor
                                {change-body {InPutClassScreen}}
                            }
                        }
                    }
                }
            }
    }
    {return {non-null self._back-button}}
  }

  {method public {validate?}:(bool, any)
    {if not self.class-file-path.value.empty? then
        {return (true, null)}
    }
    {ErrorMessages.get-error-messages ErrorMessages.FILE-SELECTION}
    {return (false, self.class-file-path-selector)}
  }
}

{define-proc {get-modifier-data-model}:ListModel
    {return
        {DefaultListModel
            "public", "package", "protected", "private"
        }
    }
}
