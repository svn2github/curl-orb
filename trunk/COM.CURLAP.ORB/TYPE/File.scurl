||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author Hitoshi Okada
|||

||
|| AbstractSerializableFile
||
{define-class public abstract serializable AbstractSerializableFile
  
  field public constant transient RESERVED_KEY_NAME:String = "name" 
  field public constant transient RESERVED_KEY_SIZE:String = "size"
  
  field protected _file-descriptor:HashTable
  {getter public open {file-descriptor}:HashTable
    {return self._file-descriptor}
  }
  {setter public open {file-descriptor file-descriptor:HashTable}:void
    set self._file-descriptor = file-descriptor
  }

  {constructor public {default}
    set self._file-descriptor = {HashTable}
  }
  
  || (abstract)data
  {getter public abstract {content}:any  }
  ||{setter public abstract {content content:any} }

  || (abstract)write
  {method public abstract {write url:Url}:void }
}

||
|| SerializableBinaryFile
||
{define-class public open serializable SerializableBinaryFile
  {inherits AbstractSerializableFile}
  
  || content
  field private bytes:ByteArray
  {getter public open {content}:any
    {return self.bytes asa ByteArray}
  }
  {setter public open {content bytes:any}:void
    {self.file-descriptor.clear}
    set self.bytes = bytes asa ByteArray
  }

  || constructor
  {constructor public {default}
    {construct-super}
    set self.bytes = {ByteArray}
  }
  {constructor public {from-url url:Url}
    {construct-super}
    set self.bytes = {ByteArray}
    {self.file-descriptor.set self.RESERVED_KEY_NAME, url.filename}
    {with-open-streams bis = {read-open-byte url} do
        def (v, size) = {bis.read out = self.bytes}
        {self.file-descriptor.set self.RESERVED_KEY_SIZE, size}
    }
  }

  || @Override
  {method public open {write url:Url}:void
    {with-open-streams bos = {write-open-byte url} do
        {bos.write self.content}
    }
  }
}

||
|| SerializableTextFile
||
{define-class public open serializable SerializableTextFile
  {inherits AbstractSerializableFile}
  
  || data
  field private text:String
  {getter public open {content}:any
    {return self.text asa String}
  }
  {setter public open {data content:any}:void
    set self.text = content asa String
  }

  {constructor public {default}
    {construct-super}
    set self.text = ""
  }
  {constructor public {from-url url:Url}
    {construct-super}
    set self.text = ""
    def buf = {StringBuf}
    {self.file-descriptor.set self.RESERVED_KEY_NAME, url.filename}
    {with-open-streams tis = {read-open url} do
        def (v, size) = {tis.read-one-string buf = buf}
        {self.file-descriptor.set self.RESERVED_KEY_SIZE, size}
        set self.text = {buf.to-String}
    }
  }

  || Override
  {method public open {write url:Url}:void
    {write-to url, self.text}
  }
}
