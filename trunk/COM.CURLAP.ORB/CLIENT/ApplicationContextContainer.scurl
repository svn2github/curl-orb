||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author Hitoshi Okada 
|||

||
|| ApplicationContext Service container (since 0.6)
||   Can manage the service as singleton.
||


||
|| get-service-names-from-container
||
{define-proc public inline {get-service-names-from-container}:{Iterator-of String}
    {return {{get-service-container}.keys-to-Iterator}}
}

||
|| get Service Object from Container
||
{define-proc public inline {get-service-from-container
                               name:String
                           }:any
    {return {{get-service-container}[name].get-service-instance}}
}

||
|| set Service Class to Container
||
{define-proc public inline {set-service-to-container
                               name:String,
                               class:ClassType,
                               server-url:#Url = null,
                               error-if-exists?:bool = true
                           }:void
    {if not {class.subtype-of? ApplicationContextClient} then
        {throw {ORBClientException "Not ApplicationContextClient class."}}
    }
    {if error-if-exists? then
        def (key, found?) = {{get-service-container}.get-key-if-exists name}
        {if found? then
            {throw {ORBClientException "This name has already existed."}}
        }
    }
    {service-container.set name, {ServiceComponent class, server-url = server-url}}
}

||
|| remove Service Class from Container
||
{define-proc public inline {remove-service-from-container
                               name:String
                           }:void
    {{get-service-container}.remove name}
}

||
|| clear Service Class from Container
||
{define-proc public inline {clear-container}:void
    {{get-service-container}.clear}
}


|| - - package things - -

||
|| Service Container 
||
{let package service-container:#{HashTable-of String, any}}
{define-proc public inline {get-service-container}:{HashTable-of String, any}
    {if service-container == null then
        set service-container = {{HashTable-of String, any}}
    }
    {return {non-null service-container}}
}

||
|| Service Component
||
{define-class package ServiceComponent

  field private instance:any
  field private class:ClassType
  field private server-url:#Url

  {constructor package {default
                           class:ClassType,
                           server-url:#Url = null
                       }
    set self.class = class
    set self.server-url = server-url
  }
  
  {method package {get-service-instance}:any
    {if self.instance == null then
        set self.instance = {new-object-from-type self.class}
        {if-non-null server-url = self.server-url then
            set (self.instance asa AbstractClient).server-url = server-url
        }
    }
    {return self.instance}
  }
}
