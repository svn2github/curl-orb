|||
||| Curl ORB for java (version 0.8)
|||  This code was generated by the Curl code generator automatically.

|||  package name   : $package_name
|||  generated date : $generate_date
|||

#foreach ($import_package in $import_packages)
{import * from $import_package}
#end

#docstring ( $javadocContent, true )
{define-class public $class_name
  {inherits $superclass}

#foreach ($method in $methods)
#docstring ( $method.javadocContent, false )
#if ($method.methodReturnType != "void")
#if ($method.methodParams == "")
  {method public {$method.methodName4Curl}:$method.methodReturnType
#if ($is_template)
    || TODO: Write test code here.
    {return null}
#else
    {return
        {self.invoke
            "$method.methodName",
            client-method-name = "$method.methodName4Curl"
        } asa $method.methodReturnType
    }
#end
  }
#else
  {method public {$method.methodName4Curl $method.methodParams}:$method.methodReturnType
#if ($is_template)
    || TODO: Write test code here.
    {return null}
#else
    {return
        {self.invoke
            "$method.methodName",
            client-method-name = "$method.methodName4Curl",
            arguments = {FastArray $method.methodArguments4Curl}
        } asa $method.methodReturnType
    }
#end
  }
#end
#else
#if ($method.methodParams == "")
  {method public {$method.methodName4Curl}:$method.methodReturnType
#if ($is_template)
    || TODO: Write test code here.
#else
    {self.invoke
        "$method.methodName",
        client-method-name = "$method.methodName4Curl"
    }
#end
  }
#else
  {method public {$method.methodName4Curl $method.methodParams}:$method.methodReturnType
#if ($is_template)
    || TODO: Write test code here.
#else
    {self.invoke
        "$method.methodName",
        client-method-name = "$method.methodName4Curl",
        arguments = {FastArray $method.methodArguments4Curl}
    }
#end
  }
#end
#end
#if ($has_async_method)

#if ($method.methodParams == "")
  {method public {async-$method.methodName ...:EventHandler}:AsyncWorker
#if ($is_template)
    || TODO: Write test code here.
    {return null}
#else
    {return
        {self.async-invoke
            "$method.methodName",
            client-method-name = "$method.methodName4Curl"
            {splice ...}
        } asa AsyncWorker
    }
#end
  }
#else
  {method public {async-$method.methodName $method.methodParams, ...:EventHandler}:AsyncWorker
#if ($is_template)
    || TODO: Write test code here.
    {return null}
#else
    {return
        {self.async-invoke
            "$method.methodName",
            client-method-name = "$method.methodName4Curl",
            arguments = {FastArray $method.methodArguments4Curl},
            {splice ...}
        } asa AsyncWorker
    }
#end
  }
#end
#else
#end

#end
  {constructor public {default server-url:#Url = null}
#if ($is_template)
    || TODO: Write test code here.
#else
    {construct-super.$superclass
        "$server_component",
        server-url = server-url
    }
#end
  }
}
