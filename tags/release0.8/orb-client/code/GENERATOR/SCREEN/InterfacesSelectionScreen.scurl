||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author ucai zhang, helped by Lei Zhao
|||

|||
||| GetClassScreen
||| The class create the Interface seletion class name
{define-class InterfacesSelectionScreen
  {inherits AbstractPanel}
  
  field private _body:#Graphic
  field private _dl-interfaces:#CustomDropdownList
  field private _cancel-button:#CustomCommandButton
  field private _next-button:#CustomCommandButton
  field private _back-button:#CustomCommandButton
  field private data:#ClassProperty
  field private _from-screen:Dynamic = {Dynamic ""}
  field private _interfaces-as-superclass?:bool
  
  {constructor {default ...}
    {construct-super
        {splice ...}
    }
    {self.layout-graphic false}
  }

  {method public {handle-data transfer-data:any}:bool
    {if {equal? transfer-data , null} then
        {return false}
    }    
    {self.interfaces-dropdownList.clear-items}
    set self.interfaces-dropdownList.dropdown-height = 0pt
    let data:{FastArray-of #ClassProperty} =
        {(transfer-data asa HashTable).get "interfaces"} asa {FastArray-of #ClassProperty}
    set self.data = {(transfer-data asa HashTable).get "class-property"} asa ClassProperty
    def blank-item = {ListValueItem ""}
    set blank-item.height = 3pt
    {self.interfaces-dropdownList.append blank-item}
    {for val in data do
        set val.constructor-properties = self.data.constructor-properties
        def item = {ListValueItem val.name , value = val}
        set item.width = 132pt
        set item.tooltip = {Tooltip val.name}
        {self.interfaces-dropdownList.append item}
    }
    {if self.interfaces-dropdownList.data-model.size > 1 then
        {self.interfaces-dropdownList.select-index 1}
        set self.interfaces-dropdownList.tooltip =
            {Tooltip {self.interfaces-dropdownList.selected-item.get-text}}
        {if self.interfaces-dropdownList.data-model.size > 3 then
            set self.interfaces-dropdownList.dropdown-height = 59pt
        }
    }
    set self._from-screen.value =
        {(transfer-data asa HashTable).get "from-screen"} asa String
    set self._interfaces-as-superclass? =
        {(transfer-data asa HashTable).get "interfaces-as-superclass"} asa bool
    {return true}
  }
  
  {setter public {body body:#Graphic}:void
    set self._body = body
  }

  {getter public {body}:Graphic
    {if {equal? self._body , null} then
        ||--screen body        
        set self._body =
            {VBox
                {Fill height = 12pt},
                {HBox
                    spacing = 5pt,
                    valign  = "center",
                    font-family = "Arial Rounded MT Bold" ,
                    color =  FONT-COLOR,||"white",
                    font-weight = "bold",
                    font-size = 12pt,
                    {Fill width = 30pt},
                    {hrule height = 1pt, width = 30pt, color = FONT-COLOR|#"white"#|},
                    self._from-screen,
                    font-size=15pt
                },
                {HBox
                    width = 15cm,
                    height = 4.5cm,
                    spacing = 10pt,
                    {Frame
                        width = 100pt,
                        height = 10pt,
                        halign = "right",
                        valign = "center",                                     
                        {create-sepc-label "Interface name"},
                        color = "black", font-size = 13pt
                    },
                    {Frame                     
                        valign = "center",
                        self.interfaces-dropdownList
                    }
                },
                {Fill height = 25.2pt},
                {hrule height = 1pt, color = "#ACA899"},
                {Fill height = .2cm},
                {HBox
                    valign = "top",
                    spacing = 5pt,
                    self.backButton,
                    {Fill},
                    self.nextButton,
                    self.cancelButton
                }
            }
    }
    {return {non-null self._body}}
  }
  
  ||-- cancel button setting
  {getter public {cancelButton}:CustomCommandButton
    {if{equal? self._cancel-button, null} then
        set self._cancel-button =
            {CustomCommandButton
                label = "Cancel",
                {on Action do
                    {{self.get-view}.close}
                }
            }
    }
    {return {non-null self._cancel-button}}
  }

  {getter public {backButton}:CustomCommandButton
    {if{equal? self._back-button, null} then
        set self._back-button =
            {CustomCommandButton
                label = "Back" ,
                {on Action do
                    {with-busy-cursor
                        {change-body {InPutClassScreen}}
                    }
                }
            }
    }
    {return {non-null self._back-button}}
  }
  
  ||-- cancel button setting
  {getter public {nextButton}:CustomCommandButton
    {if{equal? self._next-button, null} then
        set self._next-button =
            {CustomCommandButton
                label = "Next",
                {on Action do
                    {if {equal? self.interfaces-dropdownList.value , null} then
                        {ErrorMessages.get-error-messages
                            ErrorMessages.DROPDOWNLIST-ERROR-MESSAGE
                        }                                            
                     else
                        {try
                            {with-busy-cursor
                                {change-body
                                    {ClassModifierPanel
                                        {if self.interfaces-dropdownList.selected-item.value == null or
                                            self.interfaces-dropdownList.selected-item.value  == ""
                                         then
                                            {non-null self.data}
                                         else
                                            {non-null self.interfaces-dropdownList.selected-item.value asa #ClassProperty}
                                        },
                                        from-screen = self._from-screen.value asa String                                                            
                                    },
                                    transfer-data =
                                        {HashTable
                                            "interfaces-selection", INTERFACES-SELECTION,
                                            "interfaces-as-superclass", self._interfaces-as-superclass?
                                        },
                                    width = 765pt,
                                    height = 535pt,
                                    add? = false
                                }
                            }
                         catch obj:ORBServerException  do
                            {ErrorMessages.get-error-messages
                                ErrorMessages.CLASS-REQUEST-EXCEPTION
                            }
                         catch ht:HttpException do
                            {ErrorMessages.get-error-messages
                                ErrorMessages.SERVER-EXCEPTION
                            }
                         catch se:SerializeException do
                            {ErrorMessages.get-error-messages
                                ErrorMessages.SERIALIZE-EXCEPTION
                            }
                         catch obj:Exception  do
                            {ErrorMessages.get-error-messages
                                ErrorMessages.UNEXPECTED-EXCEPTION
                            }
                        }
                    }
                }
            }
    }
    {return {non-null self._next-button}}
  }

  {getter public {interfaces-dropdownList}:#CustomDropdownList
    {if{equal? self._dl-interfaces, null} then
        set self._dl-interfaces =
            {CustomDropdownList                                    
                height = 22pt,
                width = 160pt,
                font-size = 12pt,
                {on ValueFinished at dd:CustomDropdownList do
                    {if dd.selected-item.value != "" and
                        dd.selected-item.value != null
                     then
                        set self.interfaces-dropdownList.tooltip =
                            {Tooltip {dd.selected-item.get-text}}
                     else
                        set self.interfaces-dropdownList.tooltip = null
                    }
                }
            }
    }
    {return {non-null self._dl-interfaces}}
  }
  
  {method protected {layout-graphic header?:bool}:void
    {self.add-internal
        self.body,
        replace? = true
    }
  } 
}
