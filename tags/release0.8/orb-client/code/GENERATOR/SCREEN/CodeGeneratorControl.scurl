||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author ucai zhang
|||


||
|| CodeGeneratorControl
||
{define-class CodeGeneratorControl
  let private instance:#CodeGeneratorControl
  field private cgs:CodeGeneratorScreen = {CodeGeneratorScreen}
  field package main-view:#View
  field private _screen-container:{Array-of AbstractScreen} = {{Array-of AbstractScreen}}
  
  {constructor private {default}}

  {define-proc {get-instance}:CodeGeneratorControl
    {if {equal? CodeGeneratorControl.instance , null} then
        set CodeGeneratorControl.instance = {CodeGeneratorControl}
    }
    {return {non-null CodeGeneratorControl.instance}}
  }

  {getter public {code-generator-screen}:CodeGeneratorScreen
    {return self.cgs}
  }
  
  {method public {start-up screen:Graphic}:void
    {self.cgs.change-body screen}
    {self.cgs.layout-graphic}
    {set self.cgs.width = {make-elastic minimum-size = 400}}
    {set self.cgs.height = {make-elastic minimum-size = 250}}

    set self.main-view =
        {View
            title = "Curl ORB - Code Generator Wizard",
            self.cgs,
            visibility = "normal",
||--            resizable? = false,
            {on WindowClose do
                {exit}
            }
        }

    let (x:Distance, y:Distance) = {self.main-view.get-window-position}
    let pixel-size:Distance = self.main-view.display-context.pixel-size
    let (left:int, top:int, width:int, height:int) =
        {self.main-view.display-context.get-bounds-in-pixels}
    let width1:Distance = width * pixel-size
    let height1:Distance = height * pixel-size
    let x1:Distance = 0m
    let y1:Distance = 0m
    let r-width:Distance = self.main-view.width asa Distance
    let r-height:Distance = self.main-view.height asa Distance
    {if (x < width1/2 and (x + r-width/2) != width1/2) or
        ( x > width1/2 and (x - r-width/2) != width1/2)
     then
        set x1 = width1/2 - r-width/2 - 3pt
    }
    {if (y < height1/2 and (y + r-height/2) != height1/2 ) or
        (y > height1/2 and (y - r-height/2) != height1/2 )
     then
        set y1 = height1/2 - r-height/2 - 20pt
    }
    {self.main-view.set-size-from-child}
    {self.main-view.set-position x1, y1}
    {self.main-view.raise}
  }
}


||
|| Start code generator screeen.
||
{define-proc public {start screen:Graphic}:void
    {install-style-sheet {manifest-url "file", "orb-style"}}
    {{CodeGeneratorControl.get-instance}.start-up screen}
}
