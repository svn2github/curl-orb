||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author ucai zhang, helped by Lei Zhao
|||

|||
||| CodeGeneratorScreen
||| The class create the class seletion screen

{define-class public ClassSelectionPanel {inherits AbstractPanel}

  field public _radioFrame :#RadioFrame
  field private _body:#Graphic
  field private _font-size:Distance = 13pt
  
  field private _class-types:{Array-of String} =
      {{Array-of String}
        SERVICE-ClASS-DI,
        SERVICE-ClASS-HTTPSESSION,
        DATA-CLASS,
        EXCEPTION-CLASS
      }
  field private _next-button:#CustomCommandButton
  field private _cancel-button:#CustomCommandButton
  field private _server_url_tf:#CustomTextField
  field private _config-button:#CustomCommandButton
  field private _old-url-string:String = ""
  
  {constructor public {default ...}        
    {construct-super
        {splice ...}
    }  
    {self.layout-graphic false}
  }
  
  {setter public {body body:#Graphic}:void
    set self._body = body
  }

  {getter public {redioFrame}:RadioFrame
    {if {equal? self._radioFrame , null} then
        set self._radioFrame =
            {RadioFrame
                {VBox
                    spacing = 10pt,
                    {HBox                                        
                        {RadioButton                                         
                            user-data = self._class-types[0],
                            font-size = self._font-size,                                      
                            value = true 
                        },
                        {create-sepc-label self._class-types[0]}
                    },
                    {HBox
                        {RadioButton
                            user-data = self._class-types[1],
                            font-size = self._font-size
                        },
                        {create-sepc-label self._class-types[1]}
                    },
                    {HBox
                        {RadioButton
                            user-data = self._class-types[2],
                            font-size = self._font-size
                        },
                        {create-sepc-label self._class-types[2]}
                        
                    },
                    {HBox
                        {RadioButton
                            user-data = self._class-types[3],
                            font-size = self._font-size
                        },
                        {create-sepc-label self._class-types[3]}
                    }
                }  
            }
    }
    {return {non-null self._radioFrame}}
  }
  
  {getter public {nextButton}:CustomCommandButton
    {if {equal? self._next-button, null} then
        set self._next-button =
            {CustomCommandButton
                label = "Next",
                {on Action do
                    def from-screen = self.redioFrame.selected-button.user-data asa String
                    def url-string = self.server_url_tf.value asa String
                    set server-url = {url {url-string.trim-clone}}
                    {with-busy-cursor
                        {change-body
                            {InPutClassScreen},
                            transfer-data = from-screen
                        }
                    }
                }
            }
    }
    {return {non-null self._next-button}}
  }

  || cancel button setting
  {getter public {cancelButton}:CustomCommandButton
    {if{equal? self._cancel-button , null} then
        set self._cancel-button =
            {CustomCommandButton
                label = "Cancel",
                {on Action do
                    {{self.get-view}.close}
                }
            } 
    }
    {return {non-null self._cancel-button}}
  }
  
  {getter public {body}:Graphic
    {if {equal? self._body , null} then                
        || screen body        
        set self._body =
            {VBox
                {Frame
                    width = 13cm,
                    height = 6cm,
                    valign = "center",
                    halign = "center",
                    {VBox
                        {Fill},
                        {HBox
                            {Fill},
                            self.redioFrame,
                            {Fill}
                        },
                        {Fill},
                        {HBox
                            {Fill}, spacing = 5pt,
                            {create-sepc-label "Server url"},
                            self.server_url_tf,
                            {Fill}
                        },
                        {Fill}
                    }
                },
                {Fill height = 10pt},
                {hrule height = 1pt, color = "#ACA899"},
                {Fill height = .2cm},
                {Frame                              
                    width = 14cm,
                    halign = "right",
                    {HBox
                        spacing = 3pt,
                        self.config-button,
                        {Fill},
                        self.nextButton,
                        self.cancelButton
                    }
                }
            }
        
    }
    {return {non-null self._body}}
  }
  {getter public {server_url_tf}:CustomTextField
    {if {equal? self._server_url_tf , null} then
        set self._server_url_tf =
            {CustomTextField
                width = 370px,
                value = DEFAULT-SERVER-URL,
                {on FocusIn at tf:CustomTextField do
                    set self._old-url-string = {(tf.value asa String).trim-clone}
                    set tf.value = "http://"
                },
                {on FocusOut at tf:CustomTextField do                                          
                    def url-string = {(tf.value asa String).trim-clone}
                    set self.server_url_tf.value = url-string
                    {if url-string.empty? then
                        set self.server_url_tf.value = DEFAULT-SERVER-URL
                    }
                    {if {equal? url-string , "http://"} then
                        set self.server_url_tf.value = self._old-url-string 
                    }
                }
            }
    }
    {return {non-null self._server_url_tf}}
  }

  {getter public {config-button}:CustomCommandButton
    {if {equal? self._config-button , null} then
        set self._config-button =
            {CustomCommandButton
                label = "Configuration",
                {on Action do
                    {with-busy-cursor
                        def cs = {ConfigurationScreen}
                        {change-dialog cs , title = "Configuration"}
                        {if cs.return-state == RETURN-STATES.save and  server-url != null then
                            set self.server_url_tf.value = cs.return-value asa String
                        }
                    } 
                },
                width = 80pt
            }
    }
    {return {non-null self._config-button}}
  }
  
  {method protected {layout-graphic header?:bool}:void
    {self.add-internal
        self.body,
        replace? = true
    }
  }

  {method public {handle-data transfer-data:any}:bool
    {try
        || Be prepared to catch an exception if repository                                        
        || set the value from the repository
        set self.server_url_tf.value = {String {get-persistent-data "default server url"}}
        set base-dir = {String {get-persistent-data "base dir url"}}
        set rte-version = {get-persistent-data "RTE version"} asa {HashTable-of String, bool}
     catch not-found:KeyNotFoundException do
        set self.server_url_tf.value = DEFAULT-SERVER-URL
        {set-persistent-data "default server url", DEFAULT-SERVER-URL}
        set base-dir = ""
        {set-persistent-data "base dir url", base-dir}
        set rte-version = {{HashTable-of String, bool} "6.0", false, "7.0", false}
        {set-persistent-data "RTE version", rte-version}
    }    
    {return true}
  }
}
