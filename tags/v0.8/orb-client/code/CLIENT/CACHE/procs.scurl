||| Copyright (C) 1998-2010, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author Hitoshi Okada
|||

|| since 0.8

|| public APIs
{define-proc public {create-simple-cache name:String, spec:#CacheSpec = null}:SimpleCache
    {{CacheManager.get-instance}.create-cache SimpleCache, name, spec}
    {return {get-cache name} asa SimpleCache}
}
{define-proc public {create-lru-cache name:String, spec:#CacheSpec = null}:LRUCache
    {{CacheManager.get-instance}.create-cache LRUCache, name, spec}
    {return {get-cache name} asa LRUCache}
}

{define-proc public {exists-cache? cache-name:String}:bool
    {return {{CacheManager.get-instance}.exists-cache? cache-name}}
}

{define-proc public {get-cache cache-name:String}:Cache
    {return {{CacheManager.get-instance}.get-cache cache-name}}
}

{define-proc public {clear-caches}:void
    {{CacheManager.get-instance}.clear}    
}

{define-proc public {remove-caches ...:String}:void
    {for name in {splice ...} do
        {{CacheManager.get-instance}.remove-cache name}
    }
}

|| TODO: shrink under background.

|| format/parse the proper database types
{define-proc {format-value v:any}:ByteArray
    def bytes = {ByteArray}
    {with-open-streams out = {SerializeOutputStream {ByteArrayOutputStream bytes}} do
        {out.write-one v}
    }
    {return bytes}
}

{define-proc {parse-value bytes:ByteArray}:any
    {with-open-streams in = {SerializeInputStream {ByteArrayInputStream bytes}} do
        {return {in.read-one}}
    }   
}

{define-proc {format-DateTime dt:DateTime}:String
    def p = {import-package {make-package-selector "CURL.DATA-ACCESS.BASE"}}
    def StandardDateTimeDomain = {p.lookup "StandardDateTimeDomain"}
    def domain = {StandardDateTimeDomain}
    {return {domain.format dt}}
}

{define-proc {parse-DateTime str:String}:DateTime
    def p = {import-package {make-package-selector "CURL.DATA-ACCESS.BASE"}}
    def StandardDateTimeDomain = {p.lookup "StandardDateTimeDomain"}
    def domain = {StandardDateTimeDomain}
    {return {domain.parse str} asa DateTime}
}




