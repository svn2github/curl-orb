||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author ucai.zhang
|||

{doc-next
    {purpose
        Clob Class ,correspond to the type javax.sql.rowset.serial.SerialClob.                
    }
    {details
        A serialized mapping in the Java programming language of an SQL
        CLOB value
    }
    {notes
        The detail,please see the Java API Document.
    }
}
{define-class public serializable Clob {inherits AbstractExtraSerializableType}

  {doc-next
    {purpose
        A serialized array of uninterpreted chars representing the
        value of this Clob object.
    }
  }
  field private _chars:{Array-of char}

  {doc-next
    {purpose
        A Clob object,use it to create a new Clob object who is equal to self.
    }
  }
  field private _clob:#Clob

  {doc-next
    {purpose
        The number of char in this Clob object's array of chars.
    }
  }
  field private _length:int64

  {doc-next
    {purpose
        Constructs a Clob object that is a serialized version of
        the given char array.
    }
    {parameter chars,
        it is a object of {Array-of char}
        
    }
  }
  {constructor public {default chars:{Array-of char}}
    set self.length = chars.size
    set self._chars = chars
  }

  {doc-next
    {purpose
        Constructs a Blob object that is a serialized
        version of the given Clob object. 
    }
    {parameter clob,
        it is a object of {Array-of uint8}
        
    }
  }
  {constructor public {from-clob clob:Clob}
    set self._length = clob.length
    set self._chars = clob.chars
    set self._clob = clob
  }

  {doc-next
    {purpose
        set a new {Array-of char} to this Clob object.
    }
    {parameter chars,
        the new {Array-of char} will be set to this Clob object.
        
    }
  }
  {setter public {chars chars:{Array-of char}}:void
    set self._chars = chars
  }

  {doc-next
    {purpose
        get this object's {Array-of char}
    }
    {return-vals {Array-of char},
        return the chars value of this object
        
    }
  }
  {getter public {chars}:{Array-of char}
    {return self._chars}
  }

  {doc-next
    {purpose
        set a new Clob to this Clob object.
    }
    {parameter clob,
        the new one will be set to this Clob object.
        
    }
  }
  {setter public {clob clob:Clob}:void
    set self._clob = clob
  }

  {doc-next
    {purpose
        get this object's Clob
    }
    {return-vals Clob,
        return  the clob value of this object
        
    }
  }
  {getter public {clob}:#Clob
    {return self._clob}
  }

  {doc-next
    {purpose
        set a new length to this Clob object.
    }
    {parameter len,
        the new length will be set to this Clob object.
        
    }
  }
  {setter private {length len:int64}:void
    set self._length = len
  }

  {doc-next
    {purpose
        get this object's length
    }
    {return-vals int64,
        return  the length value of this object
        
    }
  }
  {getter public {length}:int64
    {return {if self.chars.size == 0 then 0 else self.chars.size}}
  }

  {doc-next
    {purpose
        Returns an {ByteInputStream-from {Array-of char}} object that contains a partial Clob value
    }
    {return-vals {ByteInputStream-from {Array-of char}},
        Returns an {ByteInputStream-from {Array-of char}} object that contains a partial Clob value
        
    }
  }
  || getBinaryStream
  {method public {get-characters-stream}:{ByteInputStream-from {Array-of char}}
    {return {{ByteInputStream-from {Array-of char}} self._chars}}
    
  }

  {doc-next
    {purpose
        Retrieves a stream that can be used to write to the CLOB
        value that this Clob object represents.
    }
    {parameter pos,
        pos the position in the CLOB value at which
        to start writing
    }
    {return-vals {ByteOutputStream-into {Array-of char}},
        Returns an {ByteOutputStream-into {Array-of char}} object that contains a partial Clob value
        
    }
  }
  || setBinaryStream
  {method public {set-characters-stream pos:int64}:{ByteOutputStream-into {Array-of char}}
    {if-non-null self.clob, {self.clob.set-characters-stream pos} then
        {return {self._clob.set-characters-stream pos}}
     else
        {error "Unsupported operation. Blob cannot return a writable 
            binary stream, unless instantiated with a Blob object that provides a setBinaryStream() implementation"}
    }
  }

  {doc-next
    {purpose
        Returns a copy of the substring contained in this
        Clob object, starting at the given position
        and continuing for the specified number or characters.
    }
    {parameter pos,
        the ordinal position of the first byte in this
        Clob object to be copied;numbering starts at 1;
        must not be less than 1 and must be less than or equal
        to the length of this Blob object        
    }
    {parameter len,
        length the number of bytes to be copied.
        it must be larger than 1
    }
    {return-vals String,
        return the substring.
        
    }
  }
  || get ByteArray
  {method public {get-subString pos:int64, len:int}:String
    
    {if pos < 1 or pos > self.length then
        {error "Invalid position in CLOB object set"}
    }
    {if (pos - 1) + len > self.length then
        {error "Invalid position and substring length"}
    }
    
    {dec pos} || correct pos to array index
    {return {String {splice {self.chars.clone-range pos asa int, len}}}}      
  }

  {doc-next
    {purpose
        Deserializes from serialization stream.       
    }
    {parameter in,
        An input stream which deserializes from a byte stream
    }
  }
  ||Deserializes from serialization stream
  {constructor public {object-deserialize in:SerializeInputStream}
    {in.read-class-version}
    {construct-super.AbstractExtraSerializableType.object-deserialize in}
    def byteArray = {deserialize in, {FastArray-of char}}
    set self._chars = {{Array-of char} {splice byteArray}}
  }

  {doc-next
    {purpose
        Deserializes from serialization stream.
        Called by the serialization code when a class instance is to be written
    }
    {parameter out,
        An output stream which serializes into a byte stream
    }
  }
  ||serializes from serialization stream
  {method public {object-serialize out:SerializeOutputStream}:void
    {out.write-class-version 0}
    {super.object-serialize out}
    {out.write-one {{FastArray-of char} {splice self.chars}}}
  }  
}
