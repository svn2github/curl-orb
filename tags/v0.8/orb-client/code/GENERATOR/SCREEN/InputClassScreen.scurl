||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp. All Rights Reserved.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|||
||| @author ucai zhang, helped by Lei Zhao
|||

|||
||| InPutClassScreen
||| The class create the class input class name
{define-class InPutClassScreen {inherits AbstractPanel}
  field private _body:#Graphic
  field private _tf-class-name:#CustomTextField
  field private _interfaces-as-superclass:#CheckButton
  field private _cancel-button:#CustomCommandButton
  field private _next-button:#CustomCommandButton
  field private _back-button:#CustomCommandButton
  field private _from-screen:Dynamic = {Dynamic ""}
  field private _browse-bf:#CustomCommandButton
  
  {constructor {default ...}
    {construct-super
        {on AttachEvent do
            {self.classnameField.request-key-focus}
        },
        {splice ...}
    }
    {self.layout-graphic false}
  }

  {setter public {body body:#Graphic}:void
    set self._body = body
  }

  {getter public {body}:Graphic
    {if {equal? self._body, null} then   
        || screen body        
        set self._body =
            {VBox
                {Fill height = 12pt},
                {HBox
                    spacing = 5pt,
                    valign  = "center",
                    font-family = "Arial Rounded MT Bold",
                    color = FONT-COLOR,||"white",
                    font-weight = "bold",
                    font-size = 12pt,
                    {Fill width = 30pt},
                    {hrule height = 1pt, width = 30pt, color = FONT-COLOR|#"white"#|},
                    self._from-screen,
                    font-size = 15pt
                },
                {Fill height = 2cm},
                {HBox
                    width = 14cm,
                    spacing = 7pt,
                    {Frame
                        width = 100pt,
                        height = 20pt,
                        halign = "right",
                        valign = "center",
                        {create-sepc-label "Class name"}
                    },
                    {HBox
                        spacing = 6pt,
                        valign = "center",
                        self.classnameField,
                        self.browseButton
                    }
                },
                {Fill height = .2cm},
                {HBox
                    spacing = 3pt,
                    valign = "center",
                    {Fill width = 3.5cm},
                    self.interfaceAsSuperclass
                },
                {Fill height = 2cm},
                {hrule height = 1pt, color = "#ACA899"},
                {Fill height = .2cm},
                {HBox
                    spacing = 3pt,             
                    valign = "top",
                    self.backButton,
                    {Fill},
                    self.nextButton,
                    self.cancelButton
                }
            }
    }
    {return {non-null self._body}}
  }

  || classname field setting
  {getter public {classnameField}:CustomTextField
    {if {equal? self._tf-class-name, null} then
        set self._tf-class-name =
            {CustomTextField
                width = 150pt,
                font-size = 12pt
            }
    }
    {return {non-null self._tf-class-name}}
  }

  {getter public {interfaceAsSuperclass}:CheckButton
    {if {equal? self._interfaces-as-superclass, null} then
        set self._interfaces-as-superclass =
            {CheckButton
                label =
                    {text color = FONT-COLOR|#"white"#|, Write interfaces as super class},
                width = 200pt,
                font-size = 12pt,
                {on e:ValueChanged at v:CheckButton do
                    def t = self._from-screen.value
                    {if t != DATA-CLASS then
                        set v.value = false
                        {ErrorMessages.get-error-messages
                            ErrorMessages.CANNOT-CHOOSE, t}
                    }
                }
            }
    }
    {return {non-null self._interfaces-as-superclass}}
  }
  
  || cancel button setting
  {getter public {cancelButton}:CustomCommandButton
    {if{equal? self._cancel-button , null} then
        set self._cancel-button =
            {CustomCommandButton
                label = "Cancel",
                {on Action do
                    {{self.get-view}.close}
                }
            } 
    }
    {return {non-null self._cancel-button}}
  }

  {getter public {nextButton}:CustomCommandButton
    {if{equal? self._next-button , null} then
        set self._next-button =
            {CustomCommandButton
                label = "Next",
                {on Action do
                    {if {equal? {(self._tf-class-name.value asa String).trim-clone}, ""} then
                        {ErrorMessages.get-error-messages
                            ErrorMessages.TEXTFIELD-ERROR-MESSAGE
                        }
                        set self._tf-class-name.value = ""
                        {self._tf-class-name.request-key-focus}
                     else
                        {try
                            {with-busy-cursor
                                let server-data:#ClassProperty = null
                                def class-name = {(self.classnameField.value asa String).trim-clone}
                                {if self._from-screen.value == SERVICE-ClASS-DI then
                                    set server-data =
                                        {ClassPropertyLoader.get-ClassProperty-in-ApplicationContext
                                            class-name,
                                            interfaces-as-superclass? = self.interfaceAsSuperclass.value,
                                            server-url = server-url
                                        }
                                 else
                                    set server-data =
                                        {ClassPropertyLoader.get-ClassProperty-from-ClassName
                                            class-name,
                                            interfaces-as-superclass? = self.interfaceAsSuperclass.value,
                                            server-url = server-url
                                        }
                                }
                                
                                let non-serializable-interface?:bool = true
                                {if server-data.interface-properties == null or
                                    server-data.interface-properties.size == 0 or
                                    self._from-screen.value == DATA-CLASS or
                                    self._from-screen.value == EXCEPTION-CLASS 
                                 then
                                    {change-body
                                        {ClassModifierPanel
                                            server-data asa ClassProperty,
                                            from-screen = self._from-screen.value asa String
                                        },
                                        width = 765pt,
                                        height = 535pt,
                                        transfer-data =
                                            {HashTable 
                                                "interfaces-selection", self._from-screen.value,
                                                "interfaces-as-superclass", self.interfaceAsSuperclass.value
                                            },
                                        add? = false
                                    }
                                 else ||if self._from-screen.value == SERVICE-ClASS-HTTPSESSION then
                                    def tranfer-data = {HashTable}
                                    {tranfer-data.set "from-screen", self._from-screen.value}
                                    {tranfer-data.set "interfaces", server-data.interface-properties}
                                    {tranfer-data.set "interfaces-as-superclass", self.interfaceAsSuperclass.value}
                                    {tranfer-data.set "class-property", server-data}
                                    {change-body
                                        {InterfacesSelectionScreen},
                                        transfer-data = tranfer-data
                                    }
                                }
                            }
                         catch obj:ORBServerException  do
                            {ErrorMessages.get-error-messages
                                ErrorMessages.CLASS-REQUEST-EXCEPTION
                            }
                         catch ht:HttpException do
                            {ErrorMessages.get-error-messages
                                ErrorMessages.SERVER-EXCEPTION
                            }
                         catch se:SerializeException do
                            {ErrorMessages.get-error-messages
                                ErrorMessages.SERIALIZE-EXCEPTION
                            }
                         catch obj:Exception  do
                            {ErrorMessages.get-error-messages
                                ErrorMessages.UNEXPECTED-EXCEPTION
                            }
                        }
                    }
                    
                }
            }
    }
    {return {non-null self._next-button}}
  }

  {getter public {browseButton}:CustomCommandButton
    {if{equal? self._browse-bf , null} then
        set self._browse-bf =
            {CustomCommandButton
                label = "Browse",
                {on Action do
                    {with-busy-cursor
                        def asc = {AutocompleteSearchControlScreen}
                        {change-dialog
                            asc,
                            title = "Choose a class name",
                            transfer-data = self._from-screen.value asa String
                        }
                        {if asc.return-state == RETURN-STATES.ok then
                            set self.classnameField.value = asc.return-value asa String
                        }
                    }
                }
            }
    }
    {return {non-null self._browse-bf}}
  }
  {getter public {backButton}:CustomCommandButton
    {if{equal? self._back-button , null} then
        set self._back-button =
            {CustomCommandButton
                label = "Back",
                {on Action do
                    {with-busy-cursor
                        {change-body {ClassSelectionPanel}}
                    }
                }
            }
    }
    {return {non-null self._back-button}}
  }
  
  {method protected {layout-graphic header?:bool}:void
    {self.add-internal
        self.body,
        replace? = true
    }
  }
  
  {method public {handle-data transfer-data:any}:bool
    {if-non-null transfer-data then
        set self.classnameField.value = ""
        set self.interfaceAsSuperclass.value = false
        {if-non-null transfer-data then
            set self._from-screen.value = transfer-data asa String
        }
    }
    {return true}
  }
}
