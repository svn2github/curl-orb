||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.



{doc-next
    {purpose
        Class implementing the {docref SQLConnection} API for SQLite.
    }
}
{define-class public SQLiteConnection {inherits SQLConnection}

  {doc-next
    {purpose
        The {docref SQLiteDatabase} that is used for all operations.
    }
  }
  field public constant database:SQLiteDatabase

  {doc-next
    {purpose
        Create a {docref SQLiteConnection}.
    }
    {parameter database,
        {docref SQLiteDatabase} to base this connection on.
    }
  }
  {constructor public {default 
                          database:SQLiteDatabase
                      }
    || open database
    set self.database = database

    || superclasses
    {construct-super.SQLConnection 
        {if-non-null database-url = database.url then
            database-url
         else
            || TODO: is there a better url for in memory databases?
            {url "curl://string/"}
        }
    }
    
  }

  || Connection protocol
  || -----------
  {doc-next
    {purpose Obtain a list of the databases available through this
        connection.
    }
    {notes
        The SQLite classes use a database name as part of what
        table is being accessed, not as what database to connect
        to.  The default main database is generally signified by the
        empty string.
    }
  }
  {method public {get-database-names}:StringArray
    || NOTE: not cached, as can change on 'attach/detach'
    let database-names:StringArray = {StringArray}
    {self.execute-sqlite
        "PRAGMA database_list", ||""
        callback =
            {proc {row:Array}:bool
                {database-names.append row[1] asa String}
                {return true}
            }
    }
    {return database-names}
  }

  {doc-next
    {purpose Obtain a list of the tables in the specified database.
    }
  }
  {method public {get-tables database-name:String}:StringArray
    let tables:StringArray = {StringArray}
    || FIXME: not sure which version will fix that temp.sqlite_master
    || will work, earlier versions needed temp.sqlite_temp_master
    {self.execute-sqlite
        "SELECT name FROM " & ||""
        {if database-name == "temp" then
            "sqlite_temp_master" ||""
         else
            {self.combined-table-name database-name, "sqlite_master"} ||""
        } &
        " WHERE name NOT LIKE 'sqlite_%' AND type IN ('table', 'view')", ||""
        callback =
            {proc {row:Array}:bool
                {tables.append row[0] asa String}
                {return true}
            }
    }
    {tables.sort}
    {return tables}
  }

  {method private {get-auto-increment-for-name
                      database-name:String,
                      table-name:String,
                      primary-key-field-name:String
                  }:(found-answer?:bool, bool)
    {try
        let primary-key-is-auto-increment?:bool
        def (datatype, collation, not-null?, primary-key?, auto-increment?) =
            {self.database.table-column-metadata
                database-name,
                table-name,
                primary-key-field-name
            }
            {if primary-key? and
                (auto-increment? or
                || Looks like an alias for ROWID
                 not {SQLiteRecordSet.need-rowid?
                        self, database-name, table-name
                     })
             then
                set primary-key-is-auto-increment? = true
            }
        {return true, primary-key-is-auto-increment?}
     catch ex:SQLiteException do
        || Ignore errors like metadata functions don't exist.
    }
    {return false, false}
  }

  {doc-next
    {purpose Return a {docref RecordFields} object representing the
        columns of a table or query result in the specified database.
    }
    {details
        The parameters match those of
        {docref SQLConnectedRecordSet.create}.
    }
    {notes
        This should be used instead of {docref Connection.get-fields},
        because some of the key information for the {docref RecordFields}
        needs to be supplied in the keyword parameters.
    }
  }
  {method public {get-sql-fields
                      database-name:String,
                      query:String,
                      table-name:#String = null,
                      hidden-primary-key-field:int = -1,
                      query-is-full-row?:bool = false,
                      primary-keys:#{Array-of String} = null,
                      strict-types?:bool = false
                 }:(RecordFields, #String)

    let fs:{Array-of RecordField} = {new {Array-of RecordField}}
    let hidden-primary-key-field-name:#String
    let primary-key-is-auto-increment?:bool = false
    let defaults:#StringStringTable, not-nulls:#{Set-of String}
    || FIXME: could we skip this if not request-modifiable?
    || Use table-name, if available to get additional meta-data.
    {if-non-null table-name then
        let got-answer?:bool
        {if primary-keys != null and primary-keys.size == 1 then
            set (got-answer?, primary-key-is-auto-increment?) =
                {self.get-auto-increment-for-name
                    database-name, table-name, primary-keys[0]
                }
        }
        {if not got-answer? then
            || FIXME: There is no way to get if a column is auto-increment, so
            || we check for a row about this table in sqlite_sequence, but
            || that row may not be created until at least one row has been
            || added to the table.
            {try
                {self.execute-sqlite
                    "SELECT seq from " & ||""
                    {self.combined-table-name database-name, "sqlite_sequence"} &
                    " WHERE name='" & table-name & "'", ||""
|#
                    args-callback =
                        {proc {statement:SQLiteStatement}:void
                            {statement.bind-text 1,
                                {self.combined-table-name database-name, table-name}
                            }
                        },
#|
                    callback =
                        {proc {row:Array}:bool
                            set primary-key-is-auto-increment? = true
                            {return false}
                        }
                    }
             catch ex:SQLiteException do
                || Ignore failures like the table not existing.
            }
        }
        set (defaults, not-nulls) =
            {self.get-defaults-and-not-nulls-for-table database-name, table-name}
    }
    {with-statement in self.database
        statement = query
     do
        let nval:int = statement.column-count
        || HACK: avoid duplicate names
        let names:{HashTable-of String, int} = {{HashTable-of String, int}}
        {for i = 0 below nval do
            let real-name:String = {statement.get-column-name i}
            let name:String = real-name
            let (duplicates:int, found?:bool) =
                {names.get-if-exists name}
            {if duplicates > 0 then
                set name = {format "%s_%02d", name, duplicates}
            }
            set names[name] = duplicates + 1

            {if i == hidden-primary-key-field then
                set hidden-primary-key-field-name = real-name
                let got-answer?:bool
                {continue}
            }
            let decltype:#String = {statement.get-column-decltype i}
            let type:String = {if-non-null decltype then decltype else ""}
            let affinity:SQLiteDatatypeAffinity = 
                {SQLiteDatatypeAffinity-from-declared-type type}
            let domain:Domain =
                {SQLiteVariantDomain.from-affinity affinity,
                    strict? = strict-types?
                }
            let primary-key?:bool =
                {if-non-null primary-keys then
                    {primary-keys.find real-name} >= 0
                 else
                    false
                }
            let (default-value:any, default-found?:bool) =
                {if-non-null defaults then
                    let (default-string:String, default-found?:bool) =
                        {defaults.get-if-exists real-name}
                    let default-value:any
                    {if default-found? then
                        set default-value =
                            {decode-literal default-string, affinity}
                    }
                    (default-value, default-found?)
                 else
                    (null, false)
                }
            let auto-increment?:bool =
                primary-key? and
                (primary-keys == null or primary-keys.size == 1) and
                primary-key-is-auto-increment? and
                (affinity == SQLiteDatatypeAffinity.INTEGER)

            let not-null?:bool =
                auto-increment? or
                (not-nulls != null and {not-nulls.member? real-name})
            let f:SQLRecordField = 
                {if default-found? then
                    {SQLRecordField
                        name, 
                        domain = domain,
                        || NOTE: needs to be nullable to defeat Curl check
                        nullable? = true,
                        not-null? = not-null?,
                        modifiable? = true,
                        primary-key? = primary-key?,
                        auto-increment? = auto-increment?,
                        default-value = default-value,
                        type
                    }
                 else
                    {SQLRecordField
                        name, 
                        domain = domain,
                        || NOTE: needs to be nullable to defeat Curl check
                        nullable? = true, ||nullable?,
                        not-null? = not-null?,
                        modifiable? = true,
                        primary-key? = primary-key?,
                        auto-increment? = auto-increment?,
                        type
                    }
                }
            {fs.append f}
        }
    }
    {return {RecordFields {splice fs}}, hidden-primary-key-field-name}
  }

  {method package {combined-table-name database-name:String, table-name:String
                  }:String
    {return
        {if database-name != "" and database-name != "main" then
            database-name & "." & table-name
         else
            table-name
        }
    }
  }

  {doc-next
    {purpose
        Get primary key information for a given table.
    }
  }
  || FIXME: We could try to combine this with get-defaults-and-not-nulls
  || somehow.
  {method package {get-primary-keys-for-table
                      database-name:String,
                      table-name:String
                  }:(field-names:{Array-of String})
    let primary-keys:{Array-of String} = {new {Array-of String}}
    || Couldn't get bind-text to work with this query...
    {self.execute-sqlite
        "PRAGMA " &
        {self.combined-table-name database-name, "table_info"} & ||""
        "('" & {table-name.replace-clone "'", "''"} & "')", ||""
|#
         args-callback =
            {proc {statement:SQLiteStatement}:void
                {statement.bind-text 1,
                    {self.combined-table-name database-name, table-name}
                }
            },
#|
         callback =
            {proc {row:Array}:bool
                || Check the primary key column
                {if row[5] != 0 then
                    || Save the column names
                    {primary-keys.append row[1] asa String}
                }
                {return true}
            }
    }
    {return primary-keys}
  }
  {method package {get-defaults-and-not-nulls-for-table
                      database-name:String,
                      table-name:String
                  }:(defaults:StringStringTable, not-nulls:{Set-of String})
    let defaults:StringStringTable = {new StringStringTable}
    let not-nulls:{Set-of String} = {new {Set-of String}}
    || Couldn't get bind-text to work with this query...
    {self.execute-sqlite
        "PRAGMA " &
        {self.combined-table-name database-name, "table_info"} & ||""
        "('" & {table-name.replace-clone "'", "''"} & "')", ||""
|#
         args-callback =
            {proc {statement:SQLiteStatement}:void
                {statement.bind-text 1,
                    {self.combined-table-name database-name, table-name}
                }
            },
#|
         callback =
            {proc {row:Array}:bool
                || Check the primary key column
                {if row[4] != null and row[4] != "" then
                    || Save the column names
                    set defaults[row[1] asa String] = row[4] asa String
                }
                {if row[3] != 0 then
                    {not-nulls.insert row[1] asa String}
                }
                {return true}
            }
    }
    {return defaults, not-nulls}
  }

  {method public {get-fields database-name:String, query:String}:RecordFields
    || Note: this could also accept table names and turn them into queries,
    || but that dumb.
    {return
        {self.get-sql-fields
            database-name,
            query
        }
    }
  }

  {method public {table-exists? database-name:String, table:String}:bool
    || TODO: more efficient to use SQL directly.
    let tables:StringArray = {self.get-tables database-name}
    || FIXME: Should this be case-insensative?
    {return {tables.find table} >= 0}
  }

  || SQLConnection API

  || inherited from Connection
  {method public {create-record-set
                     database-name:String,
                     query:String,
                     request-modifiable?:bool=false,
                     size-limit:int=-1,
                     ...:EventHandler
                 }:SQLiteRecordSet
    {return
        {if {query.find ' '} < 0 then
            {self.create-sql-record-set-from-table-name
                database-name,
                query, || table-name
                request-modifiable? = request-modifiable?,
                size-limit = size-limit,
                ...
            }
         else
            {self.create-sql-record-set
                database-name,
                query,
                request-modifiable? = request-modifiable?,
                size-limit = size-limit,
                ...
            }
        }
    }
  }

  {method public {create-sql-record-set-from-table-name
                     database-name:String,
                     table-name:String,
                     request-modifiable?:bool=false,
                     size-limit:int=-1,
                     base-where-clause:#String = null,
                     load-now?:bool = true,
                     strict-types?:bool = false,
                     ...:EventHandler
                 }:SQLiteRecordSet
    {return
        {SQLiteRecordSet.create-from-table-name
            self,
            database-name,
            table-name,
            request-modifiable? = request-modifiable?,
            size-limit = size-limit,
            base-where-clause = base-where-clause,
            load-now? = load-now?,
            strict-types? = strict-types?,
            ...
        }
    }
  }

  {method public {create-sql-record-set
                     database-name:String,
                     query:String,
                     request-modifiable?:bool=false,
                     size-limit:int=-1,
                     table-name:#String = null,
                     base-where-clause:#String = null,
                     hidden-primary-key-field:int = -1,
                     || I.E. does the query look like *, or
                     || ROWID, *, with hidden-primary-key-field = 0
                     || This allows optimized INSERT statements to be
                     || used.
                     query-is-full-row?:bool = false,
                     primary-keys:#{Array-of String} = null,
                     load-now?:bool = true,
                     strict-types?:bool = false,
                     ...:EventHandler
                 }:SQLiteRecordSet
    {return
        {SQLiteRecordSet.create
            self,
            database-name,
            query,
            request-modifiable? = request-modifiable?,
            size-limit = size-limit,
            table-name = table-name,
            base-where-clause = base-where-clause,
            hidden-primary-key-field = hidden-primary-key-field,
            query-is-full-row? = query-is-full-row?,
            primary-keys = primary-keys,
            load-now? = load-now?,
            strict-types? = strict-types?,
            ...
        }
    }
  }

  {doc-next
    {purpose
        Execute one or more SQL queries, and provide results, if any.
    }
    {parameter query,
        The SQL query or queries to execute.
    }
    {parameter args-callback,
        Called with the statement before each query is executed
        to allow for binding of arguments.
    }
    {parameter callback,
        Called with each row that results from executing a query.
        May return {ctext false} to stop execution of that query.
    }
    {parameter restart-callback,
        Called after completing execution of the query to ask if query
        should be executed again.
    }
    {parameter throw-on-error?,
        If {ctext true} and executing the statement fails,
        an error will be thrown. Otherwise no error will be thrown and
        the caller is responsible to check the return value of this
        method to see if the statement was successfully
        executed or not.

        It is {ctext true} by default.
    }
    {parameter start-record,
        Row to start calling {param callback} on.  This will use
        LIMIT clauses if the query is a SELECT statement.  This may not
        be used if {param query} contains multiple queries.
    }
    {parameter size-limit,
        Row to stop executing query at.  This will use
        LIMIT clauses if the query is a SELECT statement.  This may not
        be used if {param query} contains multiple queries.
    }
    {return-vals
        Returns {ctext true} if execution succeeded.  If {param callback}
        returns {ctext false} then this will return {ctext true}.
    }
  }
  {method public {execute-sqlite
                     query:String,
                     args-callback:#{proc-type {SQLiteStatement}:void} = null,
                     callback:#{proc-type {row:Array}:bool} = null,
                     restart-callback:#{proc-type {SQLiteStatement}:bool} = null,
                     throw-on-error?:bool = true,
                     start-record:int = 0,
                     size-limit:int = -1
                 }:bool
    || If this is a SELECT statement we can handle start-record/size-limit
    || in the database, if it is PRAGMA or whatever then we do it manually.
    || Note: there had better not be a ; at the end of the statement.
    let limit-already-handled?:bool =
        {if (start-record != 0 or size-limit >= 0) and
            {query.prefix? "SELECT", ignore-case? = true}
         then
            || Note: This is apparently slower than looking at keys
            || and just asking for the next size-limit rows after the last
            || key that was loaded.  But there is no way to implement
            || that generically.  Maybe we could let whatever is doing paging
            || remember rowids/keys and use that to help implement that.
            set query = query & " LIMIT " & start-record & ", " & size-limit
            true
         else
            false
        }
    let restart?:bool = true
    {with-statement in self.database
        statement = query
     do
        {while true do
            {while restart? do
                {if-non-null args-callback then
                    {args-callback statement}
                }
                let row-index:int = -1
                {while true do
                    let status:SQLiteStatus =
                        {statement.step throw-on-error? = throw-on-error?}
                    {switch status
                     case SQLiteStatus.DONE do
                        {break}
                     case SQLiteStatus.OK, SQLiteStatus.ROW do
                     else
                        {return false}
                    }
                    {inc row-index}
                    {if not limit-already-handled? then
                        {if start-record > row-index then
                            {continue}
                         elseif size-limit >= 0 and
                            row-index >= (start-record + size-limit)
                         then
                            {break}
                        }
                    }
                    {if-non-null callback then
                        {if not {callback statement.current-row} then
                            {break}
                        }
                    }
                }
                {statement.reset}
                set restart? =
                    {if-non-null restart-callback then
                        {restart-callback statement}
                     else
                        false
                    }
            }
            {if {statement.prepare-next} then
                {if size-limit >= 0 or start-record != 0 then
                    {error
                        {lmessage 'size-limit' or 'start-record' were supplied for a multistatement query.}
                    }
                }
             else
                {break}
            }
        }
    }
    {return true}
  }

  {method public {execute-sql
                     database-name:String,
                     query:String,
                     callback:#{proc-type {row:Array}:bool} = null,
                     throw-on-error?:bool = true,
                     start-record:int = 0,
                     size-limit:int = -1
                 }:bool
    {return
        {self.execute-sqlite
            query,
            callback = callback,
            throw-on-error? = throw-on-error?,
            start-record = start-record,
            size-limit = size-limit
        }
    }
  }

  {method public {execute ...}:void || ### TRANSITION
    {self.execute-sqlite {splice ...}}
  }
  

  || inherited from Connection
  {method public {reset}:void
  }
}

